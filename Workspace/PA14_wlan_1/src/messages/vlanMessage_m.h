//
// Generated file, do not edit! Created by opp_msgc 4.5 from messages/vlanMessage.msg.
//

#ifndef _VLANMESSAGE_M_H_
#define _VLANMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>messages/vlanMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet vlanMessage 
 * {
 * 	int user_priority; 
 * 	int canonical_format_indicator ; 
 * 	int vlan_identifier; 
 * 	
 * 	int nextEtherType;
 *     int ownEtherType = 0x8100; 
 * }
 * </pre>
 */
class vlanMessage : public ::cPacket
{
  protected:
    int user_priority_var;
    int canonical_format_indicator_var;
    int vlan_identifier_var;
    int nextEtherType_var;
    int ownEtherType_var;

  private:
    void copy(const vlanMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const vlanMessage&);

  public:
    vlanMessage(const char *name=NULL, int kind=0);
    vlanMessage(const vlanMessage& other);
    virtual ~vlanMessage();
    vlanMessage& operator=(const vlanMessage& other);
    virtual vlanMessage *dup() const {return new vlanMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getUser_priority() const;
    virtual void setUser_priority(int user_priority);
    virtual int getCanonical_format_indicator() const;
    virtual void setCanonical_format_indicator(int canonical_format_indicator);
    virtual int getVlan_identifier() const;
    virtual void setVlan_identifier(int vlan_identifier);
    virtual int getNextEtherType() const;
    virtual void setNextEtherType(int nextEtherType);
    virtual int getOwnEtherType() const;
    virtual void setOwnEtherType(int ownEtherType);
};

inline void doPacking(cCommBuffer *b, vlanMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, vlanMessage& obj) {obj.parsimUnpack(b);}


#endif // _VLANMESSAGE_M_H_
