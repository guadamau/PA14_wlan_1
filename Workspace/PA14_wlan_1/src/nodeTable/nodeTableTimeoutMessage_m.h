//
// Generated file, do not edit! Created by opp_msgc 4.5 from nodeTable/nodeTableTimeoutMessage.msg.
//

#ifndef _NODETABLETIMEOUTMESSAGE_M_H_
#define _NODETABLETIMEOUTMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "Ethernet.h"
#include "MACAddress.h"
#include "Ieee802Ctrl_m.h"
// }}



/**
 * Class generated from <tt>nodeTable/nodeTableTimeoutMessage.msg</tt> by opp_msgc.
 * <pre>
 * message NodeTableTimeoutMessage {
 * 	MACAddress node;
 * }
 * </pre>
 */
class NodeTableTimeoutMessage : public ::cMessage
{
  protected:
    MACAddress node_var;

  private:
    void copy(const NodeTableTimeoutMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NodeTableTimeoutMessage&);

  public:
    NodeTableTimeoutMessage(const char *name=NULL, int kind=0);
    NodeTableTimeoutMessage(const NodeTableTimeoutMessage& other);
    virtual ~NodeTableTimeoutMessage();
    NodeTableTimeoutMessage& operator=(const NodeTableTimeoutMessage& other);
    virtual NodeTableTimeoutMessage *dup() const {return new NodeTableTimeoutMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getNode();
    virtual const MACAddress& getNode() const {return const_cast<NodeTableTimeoutMessage*>(this)->getNode();}
    virtual void setNode(const MACAddress& node);
};

inline void doPacking(cCommBuffer *b, NodeTableTimeoutMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NodeTableTimeoutMessage& obj) {obj.parsimUnpack(b);}


#endif // _NODETABLETIMEOUTMESSAGE_M_H_
