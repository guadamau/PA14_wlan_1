#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\master 0000_PA14_wlan_1.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman cmr
\font_sans lmss
\font_typewriter cmtt
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf true
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing other 1.2
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 35mm
\topmargin 35mm
\rightmargin 25mm
\bottommargin 30mm
\headheight 18mm
\headsep 12mm
\footskip 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
markright{Teil IV: Anhang}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Offizielle Aufgabenstellung
\begin_inset CommandInset label
LatexCommand label
name "sec:Offizielle-Aufgabenstellung"

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
1 Ausgangslage
\end_layout

\begin_layout Standard
In Anlagen für die Automatisierung der elektrischen Energieversorg hat sich
 Ethernet gut etabliert.
 Ein Anwendungsfeld ist jedoch noch mit Unsicherheiten behaftet: der Prozessbus
 von Unterstationen.
 Bei dieser Anwendung werden extrem viele Messdaten erfasst und übertragen.
 Gleichzeitig soll das Netzwerk Steuerbefehle (z.B.
 für Notabschaltung) mit sehr geringer Verzögerung übertragen können.
\end_layout

\begin_layout Standard
Um höchste Verfügbarkeit zu garantieren wird das Ethernet in einer Ringtopologie
 betrieben.
 Das Redundanzverfahren heisst HSR (High-availability Seamless Redundancy)
 und arbeitet verlustfrei, d.h.
 es übersteht den Ausfall einer Komponente oder eines Links, ohne dass Frames
 verloren gehen.
\end_layout

\begin_layout Standard
Es gibt verschiedene Ansätze, die Verzögerung kritischer Frames zu garantieren.
 
\end_layout

\begin_layout Description
a) Die Erhöhung der Datenrate (in diesem Fall von 100 MBit/s auf 1 GBit/s)
 ist naheliegend.
 Damit kann das Problem aber nicht prinzipiell gelöst, sondern lediglich
 auf ein anderes Niveau verschoben werden.
 Diesen "Brute Force"- Ansatz möchte man wegen den damit verbundenen sehr
 viel höheren Anforderungen an die Hardware wenn möglich vermeiden und stattdess
en lieber einen effizienten Algorithmus verwenden.
\end_layout

\begin_layout Description
b) Wenn es um sehr zeitsensitive Anwendungen geht, hat Ethernet generell
 das Problem, dass ein langes Frame, dessen Aussendung schon begonnen hat,
 die Aussendung eines hoch priorisierten Frames verzögert.
 Das Zeitverhalten könnte mit einem Pre-Emption-Mechanismus verzögert werden,
 welcher es erlaubt, das Versenden eines langen Frames zu unterbrechen und
 später wieder aufzunehmen.
 In der Standardisierung gibt es Bestrebungen, einen solchen Mechanismus
 einzuführen.
\end_layout

\begin_layout Description
c) Durch ein zeitgesteuertes Scheduling kann man Zeitfenster für kritische
 Kommunikation reservieren und somit Verzögerungszeiten garantieren.
\end_layout

\begin_layout Paragraph
2 Aufgabenstellung
\end_layout

\begin_layout Standard
In der Arbeit soll untersucht werden, welchen Effekt die zur Diskussion
 stehenden Massnahmen für einen konkreten Anwendungsfall bringen.
 Das umfasst folgende Tätigkeiten:
\end_layout

\begin_layout Subparagraph
2.1 Modell für HSR-Knoten erweitern
\end_layout

\begin_layout Standard
Das betrachtete Netzwerk ist ein HSR-Ring.
 Die bestehende Simulationsumgebung soll so erweitert bzw.
 angepasst werden, dass folgende Funktionen/Mechanismen simuliert werden
 können:
\end_layout

\begin_layout Description
a) Der Knoten soll zwei Prioritäten unterstützen, d.h.
 zwei Warteschlangen pro Interface bewirtschaften.
\end_layout

\begin_layout Description
b) Der Knoten soll Interspersing Express Traffic (IET) unterstützen, d.h.
 Express Frames können die aktuell ablaufende Übertragung eines Frames unterbrec
hen.
\end_layout

\begin_layout Description
c) Der in den Ring einfliessende Traffic kann limitiert werden.
\end_layout

\begin_layout Description
d) Die Vortrittsregeln bezüglich der im Ring zirkulierenden Frames und den
 Frames, die in den Ring einfliessen, können variiert werden (z.B.
 „zirkulierende Frames haben immer Vortritt“ oder „minimaler Zufluss wird
 garantiert“).
\end_layout

\begin_layout Description
e) Der Knoten implementiert ein Zeitschlitzverfahren, welches dem zeitkritischen
 Traffic und dem Bulk Traffic je eine Phase zuordnet.
\end_layout

\begin_layout Subparagraph
2.2 Lastmodell beschreiben und implementieren
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Das durch die Anwendung generierte Verkehrsaufkommen ist zu studieren und
 zu beschreiben.
 Lastgeneratoren sollen implementiert werden, die das Verkehrsaufkommen
 für die Simulation generieren durch die Überlagerung von Strömen mit folgender
 Charakteristik: 
\end_layout

\begin_layout Description
a) konstante Framerate
\end_layout

\begin_layout Description
b) zufällige zeitliche Verteilung der Frames
\end_layout

\begin_layout Description
c) spontane Einzelmeldungen
\end_layout

\begin_layout Subparagraph
2.3 Simulationen durchführen und Resultate interpretieren 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Das Zeitverhalten der verschiedenen Weiterleitungsvarianten soll durch entsprech
ende Simulationsläufe ermittelt werden.
 Die Resultate sind zu vergleichen und zu interpretieren.
 
\end_layout

\begin_layout Paragraph
3 Ziele
\end_layout

\begin_layout Itemize
Es liegt eine lauffähige und ausreichend dokumentierte Simulationsumgebung
 vor, welche
\end_layout

\begin_deeper
\begin_layout Itemize
die verschiedenen Weiterleitungsvarianten implementiert,
\end_layout

\begin_layout Itemize
Traffic unterschiedlicher Charakteristik generieren kann,
\end_layout

\begin_layout Itemize
die Laufzeit der einzelnen Frames misst und geeignet visualisiert.
\end_layout

\end_deeper
\begin_layout Itemize
Das zeitliche Verhalten einiger Konfigurationen ist für verschiedene Lastprofile
 simuliert.
 Die Resultate sind visualisiert, interpretiert und kommentiert.
\end_layout

\begin_layout Chapter
Projektmanagement
\end_layout

\begin_layout Section
Präzisierung der Aufgabenstellung
\end_layout

\begin_layout Section
Besprechungsprotokolle
\end_layout

\begin_layout Standard
Die Besprechungsprotokolle wurden Stichwortartig in einem eigenen Wiki festgehal
ten.
 Der Inhalt dieser Protokolle lautet wie folgt:
\end_layout

\begin_layout Subsection
Kalenderwoche 38: 17.09.2014
\end_layout

\begin_layout Itemize
Allgemeine Info, um was geht es:
\end_layout

\begin_deeper
\begin_layout Itemize
Echtzeit und Hochverfügbarkeit
\end_layout

\begin_layout Itemize
HSR-Ring-Netzwerk-Aufbau
\end_layout

\begin_layout Itemize
Diverse Mechanismen (Welches Frame hat Vortritt?)
\end_layout

\end_deeper
\begin_layout Itemize
Organisatorisches:
\end_layout

\begin_deeper
\begin_layout Itemize
Wöchentlicher Rapport via E-Mail vor der Besprechung
\end_layout

\begin_layout Itemize
Wöchentliche Besprechung jeden Donnerstag um 12:00
\end_layout

\begin_layout Itemize
Nächste Besprechung fällt aus
\end_layout

\end_deeper
\begin_layout Subsection
Kalenderwoche 40: 02.10.2014
\end_layout

\begin_layout Itemize
Express-Priorität nicht anhand VLAN-Tag festlegen / feststellen
\end_layout

\begin_deeper
\begin_layout Itemize
Z.B.
 im EtherType-Feld definieren
\end_layout

\end_deeper
\begin_layout Itemize
IET spezifiziert, dass bereits gesendetes Fragment ankommen muss (Normales
 Frame muss bei einem Express-Frame unterbrochen und darf nicht verworfen
 werden)
\end_layout

\begin_deeper
\begin_layout Itemize
Kein Fragment < 64 Bytes (min.
 Size Ethernet Frame)
\end_layout

\begin_layout Itemize
Zu Fragmentierendes Frame in richtige Teile aufsplitten
\end_layout

\end_deeper
\begin_layout Itemize
In unserem Fall ist das Netzwerk fehlerfrei
\end_layout

\begin_layout Itemize
Express-Frames werden nicht fragmentiert
\end_layout

\begin_layout Itemize
PHY Layer soll von Ganzem nicht merken
\end_layout

\begin_layout Itemize
Jeder Switch in einem Gerät hat Scheduler
\end_layout

\begin_layout Subsection
Kalenderwoche 41: 09.10.2014
\end_layout

\begin_layout Itemize
Anhand Zeitpunkt Frameversand und dessen Grösse ist die Dauer berechenbar
\end_layout

\begin_layout Itemize
Zeitberechnung
\end_layout

\begin_deeper
\begin_layout Itemize
Frames müssen nicht fragmentiert werden wie in der Realität
\end_layout

\begin_layout Itemize
Wie lange hat ein normales Frame, wann ein Express-Frame dazwischenkommt?
\end_layout

\begin_layout Itemize
Express-Frame zu welchem Zeitpunkt senden? (Wann wäre Frame-Fragment versendet
 worden?)
\end_layout

\end_deeper
\begin_layout Itemize
Frame mehrmals unterbrechbar
\end_layout

\begin_layout Itemize
Queuegrösse ist auch ein Faktor (Per INI-Datei der Simulation definierbar)
\end_layout

\begin_layout Subsection
Kalenderwoche 42: 16.10.2014
\end_layout

\begin_layout Itemize
Traffic-Pattern für Testing (wird noch gesandt)
\end_layout

\begin_deeper
\begin_layout Itemize
Mix konstanter Bitraten (Erzeugt Frame mit bestimmten Grösse jeden bestimmten
 Zeitabstand, es können sich auch mehrere überlagern)
\end_layout

\begin_layout Itemize
Random (Background-Traffic)
\end_layout

\begin_layout Itemize
Ab und zu Express-Frame (Alarm)
\end_layout

\begin_layout Itemize
Lastgenerator in Node, für jeden Knoten spezifisch definierbar
\end_layout

\end_deeper
\begin_layout Itemize
Besprechung Zeitschlitzverfahren
\end_layout

\begin_deeper
\begin_layout Itemize
Zeitschlitze für High und Low, Express kann immer
\end_layout

\begin_layout Itemize
Intervall wird vereinbart
\end_layout

\begin_deeper
\begin_layout Itemize
In Zeitschlitz muss man maximales Frame durchbringen
\end_layout

\begin_layout Itemize
Zeitschlitz hat Grün-Phase, in der High Frames (zyklische Messwerte) gesendet
 werden können, Rest der Zeit für Sendevorgang oder Low
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Kalenderwoche 43: 23.10.2014
\end_layout

\begin_layout Itemize
Gerät soll sich selber benachrichtigen, sobald neues Frame zu versenden
 ist
\end_layout

\begin_layout Itemize
Lastgenerator Random Prioritäten, z.B.
 10% Express, 20% High, 70% Low
\end_layout

\begin_layout Itemize
Gibt viel Multicast, wie senden?
\end_layout

\begin_layout Itemize
Demnächst Simulation im kleinen Stil mit First Come First Serve zum Laufen
 bringen
\end_layout

\begin_layout Subsection
Kalenderwoche 44: 30.10.2014
\end_layout

\begin_layout Itemize
Simulation läuft, aber stürzt nach 2 Frames ab
\end_layout

\begin_deeper
\begin_layout Itemize
Beinhaltet 3 DANH-Geräte, 2 verschiedene senden zeitgleich an anderen
\end_layout

\end_deeper
\begin_layout Itemize
Scheduler pro Port implementieren, bis jetzt ist Scheduler pro Gerät implementie
rt
\end_layout

\begin_deeper
\begin_layout Itemize
Macht wenig Sinn, Switch kann auf freien Ports gleichzeitig versenden
\end_layout

\begin_layout Itemize
Frame kommt an, wo muss es hin? Entsprechendem Scheduler zuweisen
\end_layout

\end_deeper
\begin_layout Itemize
Express: klein und selten, konstante Bitrate
\end_layout

\begin_layout Itemize
High: normaler Verkehr (Monitoring, Netzwerkmanagement, ...)
\end_layout

\begin_layout Itemize
Low: Background-Verkehr (z.B.
 TCP), oft und klein & gross
\end_layout

\begin_layout Subsection
Kalenderwoche 45: 06.11.2014
\end_layout

\begin_layout Itemize
Gedanken zu IET (Zeitberechnung):
\end_layout

\begin_deeper
\begin_layout Itemize
Sender behält normales Frame, um zu sagen wann Express-Frame versendet werden
 soll
\end_layout

\begin_layout Itemize
Empfänger verlängert 
\begin_inset Quotes fld
\end_inset

fragmentiertes Frame
\begin_inset Quotes frd
\end_inset

 um die Dauer des dazwischen versendeten Express-Frames + IFG
\end_layout

\begin_deeper
\begin_layout Itemize
Empf.
 überprüft, ob Sendezeit des Express-Frames zwischen Sende- und Ankunftszeit
 des normalen Frames ist.
 Wenn ja, wird das normale Frame verlängert
\end_layout

\end_deeper
\begin_layout Itemize
Zweiter Kanal für Express Frame?
\end_layout

\begin_deeper
\begin_layout Itemize
Wenn Channel busy ist, kann Express-Frame gesendet werden?
\end_layout

\begin_layout Itemize
Zweiter Kanal nur für Express Frames
\end_layout

\begin_layout Itemize
Keine wirkliche Fragmentierung in Simulation vornehmen, Zeitrechnung reicht
 aus
\end_layout

\end_deeper
\begin_layout Itemize
FragCount sagt nicht max.
 5 Fragmente, sondern ist ein Modulo-4-Counter
\end_layout

\begin_layout Itemize
Frame abbrechen
\end_layout

\begin_deeper
\begin_layout Itemize
Nur wenn Rest genug lang ist
\end_layout

\begin_layout Itemize
Express muss Fragmentlänge + IFG abwarten
\end_layout

\begin_layout Itemize
Normal Frame Ankunftszeit um Express + IFG verlängern
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Kalenderwoche 46: 13.11.2014
\begin_inset CommandInset label
LatexCommand label
name "sub:Kalenderwoche-46:-13.11.2014"

\end_inset


\end_layout

\begin_layout Itemize
Anwendungsfall: Substation Automation
\end_layout

\begin_deeper
\begin_layout Itemize
Schutz von Schaltungen und Leitungen sicherstellen
\end_layout

\begin_layout Itemize
Merging Units (MUs) erfassen Messwerte
\end_layout

\begin_deeper
\begin_layout Itemize
7 Messwerte (4x Spannung, 3x Strom) in einem Frame plus Zeitstempel und
 sonst.
 Steuerinfos
\end_layout

\begin_deeper
\begin_layout Itemize
High-Priority Frame von total 160 Bytes
\end_layout

\begin_layout Itemize
Konstant 4000x pro Sekunde pro MU
\end_layout

\end_deeper
\begin_layout Itemize
Spontane Einzelmeldungen (Express-Frame, selten und kurz, ca.
 100 Bytes)
\end_layout

\begin_deeper
\begin_layout Itemize
Wird zufällig mit bestimmter Wahrscheinlichkeit versendet, z.B.
 bei 20% Wahrscheinlichkeit wenn Randomwert von 0 bis 1 zwischen 0 und 0.2
 liegt
\end_layout

\end_deeper
\begin_layout Itemize
Frames werden via Multicast verteilt (Publisher / Subscriber Modell)
\end_layout

\begin_layout Itemize
Ziel sind Protection Units (PUs), welche anhand der erhaltenen Werte Entscheidun
gen treffen und doppelt vorhanden sind
\end_layout

\begin_layout Itemize
Max.
 Anzahl an MUs: 19 Stk., schauen wie es z.B.
 mit 10 ist
\end_layout

\end_deeper
\begin_layout Itemize
Background-Traffic (TCP, nicht wirklich simulierbar, Unicast, meistens mit
 Gerät ausserhalb Ring)
\end_layout

\begin_deeper
\begin_layout Itemize
TCP-ähnlichen Traffic in 2 Knoten generieren
\end_layout

\begin_deeper
\begin_layout Itemize
200 Frames à 1500 Bytes pro Sekunde von A nach B
\end_layout

\begin_layout Itemize
200 Frames à 64 Bytes pro Sekunde von B nach A
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Itemize
Was Intern generiert wird wird gleich behandelt wie das was von Aussen kommt
\end_layout

\begin_layout Itemize
Queue-Limit spielt keine allzu grosse Rolle
\end_layout

\begin_deeper
\begin_layout Itemize
Wie lange ein Frame warten muss oder wie viele Frames verloren gehen sind
 äquivalente Aussagen
\end_layout

\end_deeper
\begin_layout Itemize
Man muss am Schluss etwas zur Delay-Charakteristik von Strömen und Express-Frame
s sagen können
\end_layout

\begin_deeper
\begin_layout Itemize
Wann generiert und wann Ankunft? Differenz ist Übermittlungszeit
\end_layout

\begin_layout Itemize
Ankunftszeit dort feststellen, wo das Frame vom Netz entfernt wird
\end_layout

\begin_layout Itemize
Nicht besseren, sondern schlechteren Fall anschauen
\end_layout

\begin_deeper
\begin_layout Itemize
Duplikat anschauen (Was als 2tes ankommt)
\end_layout

\begin_layout Itemize
Best-/Worst-Case spielt nur bei Unicast eine Rolle, bei Multi-/Broadcast
 macht es wahrscheinlich keinen grossen Unterschied
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Duplikaterkennung bei allen Ports implementieren
\end_layout

\begin_deeper
\begin_layout Itemize
Kein Port soll dasselbe Frame mehrmals versenden
\end_layout

\end_deeper
\begin_layout Subsection
Kalenderwoche 47: 20.11.2014
\end_layout

\begin_layout Itemize
Testfälle für Überprüfung der Implementation
\end_layout

\begin_deeper
\begin_layout Itemize
Nicht fragmentierbare Frames
\end_layout

\begin_layout Itemize
Versenden eines langen, normalen Frames und 2 darauf folgende Express-Frames
\end_layout

\end_deeper
\begin_layout Subsection
Kalenderwoche 48: 27.11.2014
\begin_inset CommandInset label
LatexCommand label
name "sub:Kalenderwoche-48:-27.11.2014"

\end_inset


\end_layout

\begin_layout Itemize
Start der Simulation für Belastung nicht sehr interessant, ab dem Zustand
 nach der 
\begin_inset Quotes fld
\end_inset

Initialisierung
\begin_inset Quotes frd
\end_inset

 interessant
\end_layout

\begin_deeper
\begin_layout Itemize
Ab 
\begin_inset Quotes fld
\end_inset

Ready State
\begin_inset Quotes frd
\end_inset

 aufnehmen
\end_layout

\end_deeper
\begin_layout Itemize
Testing
\end_layout

\begin_deeper
\begin_layout Itemize
Mit Multicast-Frames testen, weil diese beim Sender gelöscht werden (Bei
 einem Defekt würde die Dauer dieses Frames etwa der Dauer eines normalen
 Frames entsprechen
\end_layout

\begin_layout Itemize
Express-Frames mit Multicast versenden
\end_layout

\begin_layout Itemize
Mit 17 MUs (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Kalenderwoche-46:-13.11.2014"

\end_inset

), die permanent Messwerte via Multicast versenden sollte so guet wie kein
 Platz mehr auf dem Ethernet frei sein.
\end_layout

\begin_layout Itemize
Interval, in dem die Messwerte versendet werden, variiert von MU zu MU (Phase
 beginnt nicht überall zur exakt selben Zeit)
\end_layout

\begin_deeper
\begin_layout Itemize
Beim Interval eine Zufallszeit dazu- oder abzählen, sodass der Interval
 nicht konstant ist
\end_layout

\begin_layout Itemize
Delayunterschied zu Fall, an dem die MUs gleichzeitig und mit exakt selbem
 Interval senden untersuchen
\end_layout

\end_deeper
\begin_layout Itemize
Fall: 14, 15 MUs
\end_layout

\begin_deeper
\begin_layout Itemize
Einfluss TCP (High-Frame wird angestaut, wenn gerade ein Low-Frame gesendet
 wird)
\end_layout

\begin_layout Itemize
Was wenn TCP Löcuken zwischen High-Frames schamlos nutzt?
\end_layout

\begin_deeper
\begin_layout Itemize
Zufluss TCP limitieren?
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
100Mbps für die Verbindung verwenden
\end_layout

\begin_deeper
\begin_layout Itemize
Untersuchen wie viele Frames pro Sekunde noch übertragbar sind (bevor sich
 die Queues nicht mehr leeren).
 Wie nahe kann man an diese Grenze gehen?
\end_layout

\begin_layout Itemize
Frame mit Messwerten beträgt 160 Bytes: ca.
 69444 solcher Frames über 100Mbps pro Sekunde 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\frac{10{}^{8}}{(160+Präamble+IFG)*8}=\frac{10{}^{8}}{180*8}=69444.\overline{4}$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Visualisierung der Resultate
\end_layout

\begin_deeper
\begin_layout Itemize
Histogramm (Wie viele haben Transmissiontime x?)
\end_layout

\begin_deeper
\begin_layout Itemize
Klassenbreite (Transmissiontime auf ms/us genau)
\end_layout

\end_deeper
\begin_layout Itemize
Gesamtkapazität < Summe von allem MU- plus TCP-Traffic
\end_layout

\begin_layout Itemize
Verifizierung Verhalten mit Frameverlauf in Simulation
\end_layout

\end_deeper
\begin_layout Itemize
Anleitung
\end_layout

\begin_deeper
\begin_layout Itemize
Ab CD wie starten
\end_layout

\begin_deeper
\begin_layout Itemize
Möglich: Exe-Datei starten und Config editieren (VM auf CD?)
\end_layout

\end_deeper
\begin_layout Itemize
Wie Simulation laufen lassen
\end_layout

\begin_layout Itemize
Wie Konfigurieren (in XML- und INI-Datei)
\end_layout

\begin_layout Itemize
Wie bestimmter Fall simulieren
\end_layout

\end_deeper
\begin_layout Subsection
Kalenderwoche 49: 04.12.2014
\begin_inset CommandInset label
LatexCommand label
name "sub:Kalenderwoche-49:-04.12.2014"

\end_inset


\end_layout

\begin_layout Itemize
Was bedeuten in der Simulation die verschiedenen Farben der Verbindungen?
\end_layout

\begin_deeper
\begin_layout Itemize
In Anleitung festhalten
\end_layout

\end_deeper
\begin_layout Itemize
Interner Delay (im Knoten) von 6us implementieren
\end_layout

\begin_deeper
\begin_layout Itemize
Zeit bis der Teil des Frames gelesen werde, um entscheiden zu können, was
 damit gemacht wird (Cut-Through-Switching)
\end_layout

\end_deeper
\begin_layout Itemize
Für die Verbindung zwischen den Endknoten 20m 100Mbps Kabel verwenden
\end_layout

\begin_deeper
\begin_layout Itemize
Delay von 5ns pro 1m Kabel
\end_layout

\begin_layout Itemize
Delay 20m Kabel: 100ns
\end_layout

\end_deeper
\begin_layout Itemize
Zuflusslimitierung bei TCP-ähnlichem Traffic auf z.B.
 1Mbit/s setzen
\end_layout

\begin_layout Itemize
Notieren, wo Aufgabenstellung in welchem Code erfüllt wurde und wie man
 zu diesem Modul gekommen ist
\end_layout

\begin_layout Itemize
Testfälle
\end_layout

\begin_deeper
\begin_layout Itemize
Nur ein Frame auf leeren Ring senden -> schnellster Übertragungswert
\end_layout

\begin_layout Itemize
Frame bei t1, Express bei t2 (bisschen später als t1) versenden -> Wie sieht
 es mit der Preemption aus?
\end_layout

\begin_deeper
\begin_layout Itemize
Was wenn das Frame nicht fragmentierbar ist?
\end_layout

\begin_layout Itemize
Was wenn es fragmentierbar ist?
\end_layout

\begin_layout Itemize
Kann ein langes Frame von mehreren Express-Frames unterbrochen werden?
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Kalenderwoche 50: 11.12.2014
\begin_inset CommandInset label
LatexCommand label
name "sub:Kalenderwoche-50:-11.12.2014"

\end_inset


\end_layout

\begin_layout Itemize
Zuflusslimitierung nur für Frames der Priorität 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Express-Frames gibt es 
\begin_inset Quotes fld
\end_inset

by design
\begin_inset Quotes frd
\end_inset

 wenige
\end_layout

\begin_layout Itemize
Zweck der Limitierung: Nicht Überlebenswichtiges limitieren
\end_layout

\end_deeper
\begin_layout Itemize
Steady State
\end_layout

\begin_deeper
\begin_layout Itemize
Werte in leerem Ring uninteressant
\end_layout

\begin_layout Itemize
Start und Stop uninteressant
\end_layout

\begin_layout Itemize
Fenstergrösse, in der die Werte aufgezeichnet werden, definieren, paar 10tel
 Sekunden
\end_layout

\begin_layout Itemize
Kann in omnetpp.ini definiert werden
\end_layout

\end_deeper
\begin_layout Itemize
Dies war die letzte Besprechung
\end_layout

\begin_layout Chapter
Anleitung zur Simulationsumgebung und -Durchführung
\begin_inset CommandInset label
LatexCommand label
name "chap:Anleitung-zur-Simulationsumgebun"

\end_inset


\end_layout

\begin_layout Section
Starten der virtuellen Maschine
\end_layout

\begin_layout Standard
Auf dem mitgelieferten USB-Stick befindet sich eine VDI-Datei.
 Diese Datei beinhaltet eine virtuelle Maschine (VM), auf der das 32Bit
 Linux-Betriebssystem Debian inklusive der OMNeT++-Umgebung und einer englischen
 Anleitung eingerichtet ist.
 Eine deutsche Anleitung wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Anleitung-zur-Simulationsumgebun"

\end_inset

 aufgeführt.
\end_layout

\begin_layout Standard
Damit diese virtuelle Maschine ausgeführt werden kann wird die Software
 VirtualBox benötigt.
 Diese kann unter 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

www.virtualbox.org
\end_layout

\end_inset

 heruntergeladen werden.
\end_layout

\begin_layout Standard
Um die VDI-Datei einzubinden erstellt man in VirtualBox eine neue virtuelle
 Maschine und navigiert durch den Assistenten (Typ: 
\begin_inset Quotes fld
\end_inset

Linux
\begin_inset Quotes frd
\end_inset

, Version: 
\begin_inset Quotes fld
\end_inset

Debian (32 bit)
\begin_inset Quotes frd
\end_inset

).
 Die virtuelle Maschine wurde mit einem zugewiesenen Arbeitsspeicher von
 512MB getestet (es wird empfohlen 512MB oder mehr als Arbeitsspeicher auszuwähl
en).
 Anstelle einer neuen Festplatte zu erstellen wird nun die bestehende VDI-Datei
 eingebunden.
 Wurde die virtuelle Maschine erstellt, kann sie gestartet werden.
\end_layout

\begin_layout Standard
Für den Betrieb der virtuellen Maschine sind keine Login-Daten notwendig.
 Es wird automatisch eine Desktop-Umgebung gestartet, die in etwa folgendermasse
n aussieht (Desktop-Icons können variieren):
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/040_screenshot_vm.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Screenshot der gerade gestarteten virtuellen Maschine
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Auf dem Desktop und dem Startmenü (links oben im Screenshot) werden alle
 benötigten Verknüpfungen zur Verfügung gestellt.
 Im geöffneten Startmenü gibt es rechts unten die Möglichkeit, die virtuelle
 Maschine herunter zu fahren und des Weiteren auch die Möglichkeit, nach
 Applikationen / Verknüpfungen zu suchen.
\end_layout

\begin_layout Standard
Sollte trotzdem ein Login benötigt werden, ist dieser in der VM unter dem
 Punkt 
\begin_inset Quotes fld
\end_inset

Info
\begin_inset Quotes frd
\end_inset

 zu finden.
\end_layout

\begin_layout Section
Simulation konfigurieren
\begin_inset CommandInset label
LatexCommand label
name "sec:Simulation-konfigurieren"

\end_inset


\end_layout

\begin_layout Standard
Für die Konfiguration einer Simulation kann man OMNeT++ oder einen normalen
 Texteditor verwenden.
 In dieser Anleitung werden die Dateien mit OMNeT++ editiert.
 OMNeT++ kann man über die Desktopverknüpfung starten.
\end_layout

\begin_layout Standard
Jede Simulation ist in der Datei 
\begin_inset Quotes fld
\end_inset

omnetpp.ini
\begin_inset Quotes frd
\end_inset

 (in OMNeT++ in Projekt 
\begin_inset Quotes fld
\end_inset

PA14_wlan_1
\begin_inset Quotes frd
\end_inset

 im Ordner 
\begin_inset Quotes fld
\end_inset

simulations
\begin_inset Quotes frd
\end_inset

) aufgeführt.
 Wer die Dateien mittels Texteditor editieren möchte, findet die Dateien
 über die Desktopverknüpfung 
\begin_inset Quotes fld
\end_inset

Simulation Configuration
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/040_omnetpp_ini.png
	display false
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Standort der Datei 
\begin_inset Quotes fld
\end_inset

omnetpp.ini
\begin_inset Quotes frd
\end_inset

 in OMNeT++
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:omnetpp_ini_in_omnet++"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=bash,tabsize=2}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={omnetpp.ini - Beispiel eines Simulationseintrags}
\backslash
label{lst:enumqueuenum},captionpos=b]
\end_layout

\begin_layout Plain Layout

[Config Beispielsimulation]
\end_layout

\begin_layout Plain Layout

network = beispielsimulation.SubstationHSR
\end_layout

\begin_layout Plain Layout

**.cpu.xmlparam = xmldoc("beispielsimulation/config.xml")
\end_layout

\begin_layout Plain Layout

**.endNodeSwitch.schedulerMode = "FCFS"
\end_layout

\begin_layout Plain Layout

**.PU1.cpu.multicastListener = 1
\end_layout

\begin_layout Plain Layout

**.PU2.cpu.multicastListener = 1
\end_layout

\begin_layout Plain Layout

**.vector-recording-intervals = 0.02..0.5
\end_layout

\begin_layout Plain Layout

# **.endNodeSwitch.framebyteLimit = 12500
\end_layout

\begin_layout Plain Layout

# **.endNodeSwitch.timeslotPhaseSize = 10000
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dieser Eintrag zeigt, welche Dateien zur Konfiguration editiert werden können.
 Hier können zudem weitere Eigenschaften der Simulation definiert werden
 (wie z.B.
 der anzuwendende Mechanismus), die am Anfang der Datei 
\begin_inset Quotes fld
\end_inset

omnetpp.ini
\begin_inset Quotes frd
\end_inset

 vermerkt sind.
 Bei den Zeilen mit einem #-Symbol am Anfang wird die dort gesetze Konfiguration
 nicht angewandt (derzeit als Kommentar gesetzt).
\end_layout

\begin_layout Subsection
Netzwerkaufbau
\end_layout

\begin_layout Standard
Für den Netzwerkaufbau (Zeile mit 
\begin_inset Quotes fld
\end_inset

network
\begin_inset Quotes frd
\end_inset

) wird die Datei 
\begin_inset Quotes fld
\end_inset

beispielsimulation/SubstationHSR.ned
\begin_inset Quotes frd
\end_inset

 verwendet.
 In dieser Datei sind die einzelnen Knoten definiert und miteinander Verbunden.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=bash,tabsize=2}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={SubstationHSR.ned - Beispiel eines Knoteneintrags}
\backslash
label{lst:enumqueuenum},captionpos=b]
\end_layout

\begin_layout Plain Layout

MU1: HsrEndNode {
\end_layout

\begin_layout Plain Layout

	macAddress = "00-15-12-14-88-01";
\end_layout

\begin_layout Plain Layout

	@display("i=devices/mu;p=759,53");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Beim Editieren eines solchen Knoten reicht es, wenn man den Namen (hier
 
\begin_inset Quotes fld
\end_inset

MU1
\begin_inset Quotes frd
\end_inset

), die MAC-Adresse und die Koordinaten des Knotens in der Netzwerkdarstellung
 (
\begin_inset Quotes fld
\end_inset

p=x,y
\begin_inset Quotes frd
\end_inset

) editiert.
 Erstellt man einen neuen Knoten, sind das auch die einzigen Angaben, die
 zu denen anderer Knoten abweichen müssen.
\end_layout

\begin_layout Standard
Die MAC-Adresse, die hier definiert wird, wird später in der Konfiguration
 des Lastgenerators verwendet.
\end_layout

\begin_layout Standard
Mehr über NED-Dateien ist im OMNeT++ User Manual aufzufinden 
\begin_inset CommandInset citation
LatexCommand cite
key "OMNET_USERGUIDE"

\end_inset

.
\end_layout

\begin_layout Subsection
Lastgenerator
\end_layout

\begin_layout Standard
Die XML-Datei, die zum Konfigurieren des Lastgenerators verwendet wird,
 ist im Beispiel des Simulationseintrags (erstes Listing am Anfang des Kapitels
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Simulation-konfigurieren"

\end_inset

) aufgeführt.
 Hier wird die Datei 
\begin_inset Quotes fld
\end_inset

beispielsimulation/config.xml
\begin_inset Quotes frd
\end_inset

 verwendet.
\end_layout

\begin_layout Standard
Wie die XML-Datei in etwa aussieht ist in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Netzwerkaufbau"

\end_inset

 aufzufinden.
 Ein Eintrag (source-Tag) beschreibt die Lastgenerierung eines bestimmten
 Frametyps für einen bestimmten Knoten (mittels MAC-Adresse).
 Für einen Knoten können mehrere solcher Einträge existieren, sodass er
 z.B.
 ständig 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

- und 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

-Frames generieren könnte.
 Es können auch Knoten existieren, die keinen Eintrag in der XML-Datei haben.
\end_layout

\begin_layout Standard
In der XML-Datei ist des Weiteren aufgeführt, für was welcher Inhalt editiert
 werden muss.
\end_layout

\begin_layout Section
Simulation starten
\end_layout

\begin_layout Standard
Sofern OMNeT++ noch nicht geöffnet wurde, muss es jetzt über die Desktopverknüpf
ung gestartet werden.
 Ist die Applikation geöffnet, klickt man oben auf 
\begin_inset Quotes fld
\end_inset

Run
\begin_inset Quotes frd
\end_inset

 -> 
\begin_inset Quotes fld
\end_inset

Run History
\begin_inset Quotes frd
\end_inset

 -> 
\begin_inset Quotes fld
\end_inset

PA14_wlan_1
\begin_inset Quotes frd
\end_inset

 oder klickt auf den im folgenden Bild rot umrandeten Pfeil und dann auf
 
\begin_inset Quotes fld
\end_inset

PA14_wlan_1
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/040_run_sim.png
	display false
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Starten der Simulation in OMNeT++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ist die Simulationsumgebung gestartet, kann man eine Konfiguration/Simulation
 auswählen und klickt auf 
\begin_inset Quotes fld
\end_inset

OK
\begin_inset Quotes frd
\end_inset

.
 Zur Auswahl stehen alle in dieser Arbeit durchgeführten Simulationen (Der
 Konfigurationsname ist bei der jeweiligen Simulation in der ersten Zeile
 aufgeführt) oder die vorhin konfigurierte Beispielsimulation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/040_config_selection.png
	display false
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Konfigurations-/Simulationsauswahl in OMNeT++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wenn man 
\begin_inset Quotes fld
\end_inset

Beispielkonfiguration
\begin_inset Quotes frd
\end_inset

 auswählt, sieht nach dem Klick auf 
\begin_inset Quotes fld
\end_inset

OK
\begin_inset Quotes frd
\end_inset

 die Umgebung in etwa wie folgt aus:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/040_sim_env.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Simulationsumgebung in OMNeT++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Fensterbereiche kann man sich nach Belieben zu recht ziehen.
 Im unteren Bereich ist der Nachrichtenverlauf aufgeführt.
\end_layout

\begin_layout Standard
Folgende Buttons sind links oben in der Simulationsumgebung zu verwenden:
\end_layout

\begin_layout Itemize
Step: Tätigt ein einzelnes Event, muss kein Frameversand sein.
\end_layout

\begin_layout Itemize
Run: Lässt die Simulation in einer verfolgbaren Geschwindigkeit laufen.
 Es werden alle Animationen dargestellt.
 Die Geschwindigkeit lässt sich mittels Schiebefeld oben rechts neben dem
 Schraubenschlüssel-Button genauer definieren.
\end_layout

\begin_layout Itemize
Fast: Die Simulation läuft viel schneller, der Frameversand wird nicht mehr
 animiert, jedoch ist anhand der Verbindungsfarben noch ersichtlich auf
 welcher Leitung gerade gesendet wird.
\end_layout

\begin_layout Itemize
Express: Die Simulation läuft auf der höchsten Geschwindigkeit und zeigt
 keine Animationen mehr.
\end_layout

\begin_layout Section
Resultate ansehen
\end_layout

\begin_layout Chapter
USB-Stick
\end_layout

\begin_layout Standard
Dieser Arbeit wird ein USB-Stick mit folgenden Eigenschaften mitgegeben:
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="80text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Marke & Modell
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SanDisk Extreme USB 3.0 Flash Drive
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kapazität
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16 GB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PA14_wlan_1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dateisystem
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NTFS
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
USB-Stick Eigenschaften 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Auf dem USB-Stick befinden sich folgende Dateien:
\end_layout

\begin_layout Standard
(Tree of USB-Stick content)
\end_layout

\begin_layout Chapter
Codeausschnitte
\end_layout

\begin_layout Section
Switch: Zuteiltung Frame von CPU an beide Ports nach Aussen
\begin_inset CommandInset label
LatexCommand label
name "sec:Switch:-Zuteiltung-Frame"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={switch/EndNodeSwitch.cc - Zuteiltung Frame von CPU
 an beide Ports nach Aussen}
\backslash
label{lst:cputobothports},  captionpos=b,language=C++]{_srcListings/MultiPrioHan
dleMsg_EndNodeSwitch.cc}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scheduler: Mechanismen zur Queueverwaltung
\begin_inset CommandInset label
LatexCommand label
name "sec:Scheduler:-Mechanismen-zur"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={switch/Scheduler.cc - Mechanismen zur Queueverwaltung}
\backslash
label{lst:cputobothports},  captionpos=b,language=C++]{_srcListings/processQueue
s_Scheduler.cc}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Scheduler: Zuflusslimitierung 
\begin_inset CommandInset label
LatexCommand label
name "sec:Scheduler:-Zuflusslimitierung"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[caption={switch/Scheduler.cc - Zuflusslimitierung}
\backslash
label{lst:cputobothports},  captionpos=b,language=C++]{_srcListings/tokenizer_Sc
heduler.cc}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Weiteres
\end_layout

\begin_layout Itemize
CD mit dem vollständigen Bericht als pdf-File inklusive Film- und Fotomaterial
 
\end_layout

\begin_layout Itemize
(Schaltpläne und Ablaufschemata)
\end_layout

\begin_layout Itemize
(Spezifikationen u.
 Datenblätter der verwendeten Messgeräte und/oder Komponenten)
\end_layout

\begin_layout Itemize
(Berechnungen, Messwerte, Simulationsresultate)
\end_layout

\begin_layout Itemize
(Stoffdaten)
\end_layout

\begin_layout Itemize
(Fehlerrechnungen mit Messunsicherheiten)
\end_layout

\begin_layout Itemize
(Grafische Darstellungen, Fotos)
\end_layout

\begin_layout Itemize
(Datenträger mit weiteren Daten (z.
 B.
 Software-Komponenten) inkl.
 Verzeichnis der auf diesem Datenträger abgelegten Dateien)
\end_layout

\begin_layout Itemize
(Softwarecode)
\end_layout

\end_body
\end_document
