#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\master 0000_PA14_wlan_1.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman cmr
\font_sans lmss
\font_typewriter cmtt
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf true
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing other 1.2
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 35mm
\topmargin 35mm
\rightmargin 25mm
\bottommargin 30mm
\headheight 18mm
\headsep 12mm
\footskip 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
markright{Teil IV: Anhang}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Projektmanagement
\end_layout

\begin_layout Section
Offizielle Aufgabenstellung
\begin_inset CommandInset label
LatexCommand label
name "sec:Offizielle-Aufgabenstellung"

\end_inset


\end_layout

\begin_layout Paragraph
\noindent
1 Ausgangslage
\end_layout

\begin_layout Standard
In Anlagen für die Automatisierung der elektrischen Energieversorg hat sich
 Ethernet gut etabliert.
 Ein Anwendungsfeld ist jedoch noch mit Unsicherheiten behaftet: der Prozessbus
 von Unterstationen.
 Bei dieser Anwendung werden extrem viele Messdaten erfasst und übertragen.
 Gleichzeitig soll das Netzwerk Steuerbefehle (z.B.
 für Notabschaltung) mit sehr geringer Verzögerung übertragen können.
\end_layout

\begin_layout Standard
Um höchste Verfügbarkeit zu garantieren wird das Ethernet in einer Ringtopologie
 betrieben.
 Das Redundanzverfahren heisst HSR (High-availability Seamless Redundancy)
 und arbeitet verlustfrei, d.h.
 es übersteht den Ausfall einer Komponente oder eines Links, ohne dass Frames
 verloren gehen.
\end_layout

\begin_layout Standard
Es gibt verschiedene Ansätze, die Verzögerung kritischer Frames zu garantieren.
 
\end_layout

\begin_layout Description
a) Die Erhöhung der Datenrate (in diesem Fall von 100 MBit/s auf 1 GBit/s)
 ist naheliegend.
 Damit kann das Problem aber nicht prinzipiell gelöst, sondern lediglich
 auf ein anderes Niveau verschoben werden.
 Diesen "Brute Force"- Ansatz möchte man wegen den damit verbundenen sehr
 viel höheren Anforderungen an die Hardware wenn möglich vermeiden und stattdess
en lieber einen effizienten Algorithmus verwenden.
\end_layout

\begin_layout Description
b) Wenn es um sehr zeitsensitive Anwendungen geht, hat Ethernet generell
 das Problem, dass ein langes Frame, dessen Aussendung schon begonnen hat,
 die Aussendung eines hoch priorisierten Frames verzögert.
 Das Zeitverhalten könnte mit einem Pre-Emption-Mechanismus verzögert werden,
 welcher es erlaubt, das Versenden eines langen Frames zu unterbrechen und
 später wieder aufzunehmen.
 In der Standardisierung gibt es Bestrebungen, einen solchen Mechanismus
 einzuführen.
\end_layout

\begin_layout Description
c) Durch ein zeitgesteuertes Scheduling kann man Zeitfenster für kritische
 Kommunikation reservieren und somit Verzögerungszeiten garantieren.
\end_layout

\begin_layout Paragraph
2 Aufgabenstellung
\end_layout

\begin_layout Standard
In der Arbeit soll untersucht werden, welchen Effekt die zur Diskussion
 stehenden Massnahmen für einen konkreten Anwendungsfall bringen.
 Das umfasst folgende Tätigkeiten:
\end_layout

\begin_layout Subparagraph
2.1 Modell für HSR-Knoten erweitern
\end_layout

\begin_layout Standard
Das betrachtete Netzwerk ist ein HSR-Ring.
 Die bestehende Simulationsumgebung soll so erweitert bzw.
 angepasst werden, dass folgende Funktionen/Mechanismen simuliert werden
 können:
\end_layout

\begin_layout Description
a) Der Knoten soll zwei Prioritäten unterstützen, d.h.
 zwei Warteschlangen pro Interface bewirtschaften.
\end_layout

\begin_layout Description
b) Der Knoten soll Interspersing Express Traffic (IET) unterstützen, d.h.
 Express Frames können die aktuell ablaufende Übertragung eines Frames unterbrec
hen.
\end_layout

\begin_layout Description
c) Der in den Ring einfliessende Traffic kann limitiert werden.
\end_layout

\begin_layout Description
d) Die Vortrittsregeln bezüglich der im Ring zirkulierenden Frames und den
 Frames, die in den Ring einfliessen, können variiert werden (z.B.
 „zirkulierende Frames haben immer Vortritt“ oder „minimaler Zufluss wird
 garantiert“).
\end_layout

\begin_layout Description
e) Der Knoten implementiert ein Zeitschlitzverfahren, welches dem zeitkritischen
 Traffic und dem Bulk Traffic je eine Phase zuordnet.
\end_layout

\begin_layout Subparagraph
2.2 Lastmodell beschreiben und implementieren
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Das durch die Anwendung generierte Verkehrsaufkommen ist zu studieren und
 zu beschreiben.
 Lastgeneratoren sollen implementiert werden, die das Verkehrsaufkommen
 für die Simulation generieren durch die Überlagerung von Strömen mit folgender
 Charakteristik: 
\end_layout

\begin_layout Description
a) konstante Framerate
\end_layout

\begin_layout Description
b) zufällige zeitliche Verteilung der Frames
\end_layout

\begin_layout Description
c) spontane Einzelmeldungen
\end_layout

\begin_layout Subparagraph
2.3 Simulationen durchführen und Resultate interpretieren 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Das Zeitverhalten der verschiedenen Weiterleitungsvarianten soll durch entsprech
ende Simulationsläufe ermittelt werden.
 Die Resultate sind zu vergleichen und zu interpretieren.
 
\end_layout

\begin_layout Paragraph
3 Ziele
\end_layout

\begin_layout Itemize
Es liegt eine lauffähige und ausreichend dokumentierte Simulationsumgebung
 vor, welche
\end_layout

\begin_deeper
\begin_layout Itemize
die verschiedenen Weiterleitungsvarianten implementiert,
\end_layout

\begin_layout Itemize
Traffic unterschiedlicher Charakteristik generieren kann,
\end_layout

\begin_layout Itemize
die Laufzeit der einzelnen Frames misst und geeignet visualisiert.
\end_layout

\end_deeper
\begin_layout Itemize
Das zeitliche Verhalten einiger Konfigurationen ist für verschiedene Lastprofile
 simuliert.
 Die Resultate sind visualisiert, interpretiert und kommentiert.
\end_layout

\begin_layout Section
Besprechungsprotokolle
\end_layout

\begin_layout Standard
Die Besprechungsprotokolle wurden Stichwortartig in einem eigenen Wiki festgehal
ten.
 Der Inhalt dieser Protokolle lautet wie folgt:
\end_layout

\begin_layout Subsection
Kalenderwoche 38: 17.09.2014
\end_layout

\begin_layout Itemize
Allgemeine Info, um was geht es:
\end_layout

\begin_deeper
\begin_layout Itemize
Echtzeit und Hochverfügbarkeit
\end_layout

\begin_layout Itemize
HSR-Ring-Netzwerk-Aufbau
\end_layout

\begin_layout Itemize
Diverse Mechanismen (Welches Frame hat Vortritt?)
\end_layout

\end_deeper
\begin_layout Itemize
Organisatorisches:
\end_layout

\begin_deeper
\begin_layout Itemize
Wöchentlicher Rapport via E-Mail vor der Besprechung
\end_layout

\begin_layout Itemize
Wöchentliche Besprechung jeden Donnerstag um 12:00
\end_layout

\begin_layout Itemize
Nächste Besprechung fällt aus
\end_layout

\end_deeper
\begin_layout Subsection
Kalenderwoche 40: 02.10.2014
\end_layout

\begin_layout Itemize
Express-Priorität nicht anhand VLAN-Tag festlegen / feststellen
\end_layout

\begin_deeper
\begin_layout Itemize
Z.B.
 im EtherType-Feld definieren
\end_layout

\end_deeper
\begin_layout Itemize
IET spezifiziert, dass bereits gesendetes Fragment ankommen muss (Normales
 Frame muss bei einem Express-Frame unterbrochen und darf nicht verworfen
 werden)
\end_layout

\begin_deeper
\begin_layout Itemize
Kein Fragment < 64 Bytes (min.
 Size Ethernet Frame)
\end_layout

\begin_layout Itemize
Zu Fragmentierendes Frame in richtige Teile aufsplitten
\end_layout

\end_deeper
\begin_layout Itemize
In unserem Fall ist das Netzwerk fehlerfrei
\end_layout

\begin_layout Itemize
Express-Frames werden nicht fragmentiert
\end_layout

\begin_layout Itemize
PHY Layer soll von Ganzem nicht merken
\end_layout

\begin_layout Itemize
Jeder Switch in einem Gerät hat Scheduler
\end_layout

\begin_layout Subsection
Kalenderwoche 41: 09.10.2014
\end_layout

\begin_layout Itemize
Anhand Zeitpunkt Frameversand und dessen Grösse ist die Dauer berechenbar
\end_layout

\begin_layout Itemize
Zeitberechnung
\end_layout

\begin_deeper
\begin_layout Itemize
Frames müssen nicht fragmentiert werden wie in der Realität
\end_layout

\begin_layout Itemize
Wie lange hat ein normales Frame, wann ein Express-Frame dazwischenkommt?
\end_layout

\begin_layout Itemize
Express-Frame zu welchem Zeitpunkt senden? (Wann wäre Frame-Fragment versendet
 worden?)
\end_layout

\end_deeper
\begin_layout Itemize
Frame mehrmals unterbrechbar
\end_layout

\begin_layout Itemize
Queuegrösse ist auch ein Faktor (Per INI-Datei der Simulation definierbar)
\end_layout

\begin_layout Subsection
Kalenderwoche 42: 16.10.2014
\end_layout

\begin_layout Itemize
Traffic-Pattern für Testing (wird noch gesandt)
\end_layout

\begin_deeper
\begin_layout Itemize
Mix konstanter Bitraten (Erzeugt Frame mit bestimmten Grösse jeden bestimmten
 Zeitabstand, es können sich auch mehrere überlagern)
\end_layout

\begin_layout Itemize
Random (Background-Traffic)
\end_layout

\begin_layout Itemize
Ab und zu Express-Frame (Alarm)
\end_layout

\begin_layout Itemize
Lastgenerator in Node, für jeden Knoten spezifisch definierbar
\end_layout

\end_deeper
\begin_layout Itemize
Besprechung Zeitschlitzverfahren
\end_layout

\begin_deeper
\begin_layout Itemize
Zeitschlitze für High und Low, Express kann immer
\end_layout

\begin_layout Itemize
Intervall wird vereinbart
\end_layout

\begin_deeper
\begin_layout Itemize
In Zeitschlitz muss man maximales Frame durchbringen
\end_layout

\begin_layout Itemize
Zeitschlitz hat Grün-Phase, in der High Frames (zyklische Messwerte) gesendet
 werden können, Rest der Zeit für Sendevorgang oder Low
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Kalenderwoche 43: 23.10.2014
\end_layout

\begin_layout Itemize
Gerät soll sich selber benachrichtigen, sobald neues Frame zu versenden
 ist
\end_layout

\begin_layout Itemize
Lastgenerator Random Prioritäten, z.B.
 10% Express, 20% High, 70% Low
\end_layout

\begin_layout Itemize
Gibt viel Multicast, wie senden?
\end_layout

\begin_layout Itemize
Demnächst Simulation im kleinen Stil mit First Come First Serve zum Laufen
 bringen
\end_layout

\begin_layout Subsection
Kalenderwoche 44: 30.10.2014
\end_layout

\begin_layout Itemize
Simulation läuft, aber stürzt nach 2 Frames ab
\end_layout

\begin_deeper
\begin_layout Itemize
Beinhaltet 3 DANH-Geräte, 2 verschiedene senden zeitgleich an anderen
\end_layout

\end_deeper
\begin_layout Itemize
Scheduler pro Port implementieren, bis jetzt ist Scheduler pro Gerät implementie
rt
\end_layout

\begin_deeper
\begin_layout Itemize
Macht wenig Sinn, Switch kann auf freien Ports gleichzeitig versenden
\end_layout

\begin_layout Itemize
Frame kommt an, wo muss es hin? Entsprechendem Scheduler zuweisen
\end_layout

\end_deeper
\begin_layout Itemize
Express: klein und selten, konstante Bitrate
\end_layout

\begin_layout Itemize
High: normaler Verkehr (Monitoring, Netzwerkmanagement, ...)
\end_layout

\begin_layout Itemize
Low: Background-Verkehr (z.B.
 TCP), oft und klein & gross
\end_layout

\begin_layout Subsection
Kalenderwoche 45: 06.11.2014
\end_layout

\begin_layout Itemize
Gedanken zu IET (Zeitberechnung):
\end_layout

\begin_deeper
\begin_layout Itemize
Sender behält normales Frame, um zu sagen wann Express-Frame versendet werden
 soll
\end_layout

\begin_layout Itemize
Empfänger verlängert 
\begin_inset Quotes fld
\end_inset

fragmentiertes Frame
\begin_inset Quotes frd
\end_inset

 um die Dauer des dazwischen versendeten Express-Frames + IFG
\end_layout

\begin_deeper
\begin_layout Itemize
Empf.
 überprüft, ob Sendezeit des Express-Frames zwischen Sende- und Ankunftszeit
 des normalen Frames ist.
 Wenn ja, wird das normale Frame verlängert
\end_layout

\end_deeper
\begin_layout Itemize
Zweiter Kanal für Express Frame?
\end_layout

\begin_deeper
\begin_layout Itemize
Wenn Channel busy ist, kann Express-Frame gesendet werden?
\end_layout

\begin_layout Itemize
Zweiter Kanal nur für Express Frames
\end_layout

\begin_layout Itemize
Keine wirkliche Fragmentierung in Simulation vornehmen, Zeitrechnung reicht
 aus
\end_layout

\end_deeper
\begin_layout Itemize
FragCount sagt nicht max.
 5 Fragmente, sondern ist ein Modulo-4-Counter
\end_layout

\begin_layout Itemize
Frame abbrechen
\end_layout

\begin_deeper
\begin_layout Itemize
Nur wenn Rest genug lang ist
\end_layout

\begin_layout Itemize
Express muss Fragmentlänge + IFG abwarten
\end_layout

\begin_layout Itemize
Normal Frame Ankunftszeit um Express + IFG verlängern
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Kalenderwoche 46: 13.11.2014
\end_layout

\begin_layout Itemize
Anwendungsfall: Substation Automation
\end_layout

\begin_deeper
\begin_layout Itemize
Schutz von Schaltungen und Leitungen sicherstellen
\end_layout

\begin_layout Itemize
Merging Units (MUs) erfassen Messwerte
\end_layout

\begin_deeper
\begin_layout Itemize
7 Messwerte (4x Spannung, 3x Strom) in einem Frame plus Zeitstempel und
 sonst.
 Steuerinfos
\end_layout

\begin_deeper
\begin_layout Itemize
High-Priority Frame von total 160 Bytes
\end_layout

\begin_layout Itemize
Konstant 4000x pro Sekunde pro MU
\end_layout

\end_deeper
\begin_layout Itemize
Spontane Einzelmeldungen (Express-Frame, selten und kurz, ca.
 100 Bytes)
\end_layout

\begin_deeper
\begin_layout Itemize
Wird zufällig mit bestimmter Wahrscheinlichkeit versendet, z.B.
 bei 20% Wahrscheinlichkeit wenn Randomwert von 0 bis 1 zwischen 0 und 0.2
 liegt
\end_layout

\end_deeper
\begin_layout Itemize
Frames werden via Multicast verteilt (Publisher / Subscriber Modell)
\end_layout

\begin_layout Itemize
Ziel sind Protection Units (PUs), welche anhand der erhaltenen Werte Entscheidun
gen treffen und doppelt vorhanden sind
\end_layout

\begin_layout Itemize
Max.
 Anzahl an MUs: 19 Stk., schauen wie es z.B.
 mit 10 ist
\end_layout

\end_deeper
\begin_layout Itemize
Background-Traffic (TCP, nicht wirklich simulierbar, Unicast, meistens mit
 Gerät ausserhalb Ring)
\end_layout

\begin_deeper
\begin_layout Itemize
TCP-ähnlichen Traffic in 2 Knoten generieren
\end_layout

\begin_deeper
\begin_layout Itemize
200 Frames à 1500 Bytes pro Sekunde von A nach B
\end_layout

\begin_layout Itemize
200 Frames à 64 Bytes pro Sekunde von B nach A
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Itemize
Was Intern generiert wird wird gleich behandelt wie das was von Aussen kommt
\end_layout

\begin_layout Itemize
Queue-Limit spielt keine allzu grosse Rolle
\end_layout

\begin_deeper
\begin_layout Itemize
Wie lange ein Frame warten muss oder wie viele Frames verloren gehen sind
 äquivalente Aussagen
\end_layout

\end_deeper
\begin_layout Itemize
Man muss am Schluss etwas zur Delay-Charakteristik von Strömen und Express-Frame
s sagen können
\end_layout

\begin_deeper
\begin_layout Itemize
Wann generiert und wann Ankunft? Differenz ist Übermittlungszeit
\end_layout

\begin_layout Itemize
Ankunftszeit dort feststellen, wo das Frame vom Netz entfernt wird
\end_layout

\begin_layout Itemize
Nicht besseren, sondern schlechteren Fall anschauen
\end_layout

\begin_deeper
\begin_layout Itemize
Duplikat anschauen (Was als 2tes ankommt)
\end_layout

\begin_layout Itemize
Best-/Worst-Case spielt nur bei Unicast eine Rolle, bei Multi-/Broadcast
 macht es wahrscheinlich keinen grossen Unterschied
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
------------------------------------
\end_layout

\begin_layout Itemize
Offizielle Aufgabenstellung, Projektauftrag
\end_layout

\begin_layout Itemize
(Zeitplan)
\end_layout

\begin_layout Itemize
(Besprechungsprotokolle oder Journals)
\end_layout

\begin_layout Chapter
Weiteres
\end_layout

\begin_layout Itemize
CD mit dem vollständigen Bericht als pdf-File inklusive Film- und Fotomaterial
 
\end_layout

\begin_layout Itemize
(Schaltpläne und Ablaufschemata)
\end_layout

\begin_layout Itemize
(Spezifikationen u.
 Datenblätter der verwendeten Messgeräte und/oder Komponenten)
\end_layout

\begin_layout Itemize
(Berechnungen, Messwerte, Simulationsresultate)
\end_layout

\begin_layout Itemize
(Stoffdaten)
\end_layout

\begin_layout Itemize
(Fehlerrechnungen mit Messunsicherheiten)
\end_layout

\begin_layout Itemize
(Grafische Darstellungen, Fotos)
\end_layout

\begin_layout Itemize
(Datenträger mit weiteren Daten (z.
 B.
 Software-Komponenten) inkl.
 Verzeichnis der auf diesem Datenträger abgelegten Dateien)
\end_layout

\begin_layout Itemize
(Softwarecode)
\end_layout

\end_body
\end_document
