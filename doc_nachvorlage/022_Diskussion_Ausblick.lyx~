#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\master 0000_PA14_wlan_1.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman cmr
\font_sans lmss
\font_typewriter cmtt
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf true
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing other 1.2
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 35mm
\topmargin 35mm
\rightmargin 25mm
\bottommargin 30mm
\headheight 18mm
\headsep 12mm
\footskip 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Diskussion und Ausblick
\end_layout

\begin_layout Section
Besprechung der Ergebnisse
\end_layout

\begin_layout Standard
Die umfangreichen Ergebnisse sind aufgrund der ausführlichen Überprüfung
 der Implementation (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Überprüfung-der-Implementation"

\end_inset

) aussagekräftig.
 Des Weiteren traten auch erwartete Ergebnisse ein, wie z.B., dass mit 17
 MUs das Netzwerk an seine Grenzen stösst (siehe Simulation in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Simulation-1.7:-Maximale"

\end_inset

).
 Die Simulation von IET funktioniert wie erwartet und die Preemption von
 Frames der Priorität 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

 kann zeitlich simuliert werden.
\end_layout

\begin_layout Standard
Anhand der aus den Simulationen resultierenden Graphen lassen sich Annahmen
 bestätigen, weisen einen verständlichen Ablauf auf und lassen auf klare
 Aussagen schliessen.
 Mittels dem vom unserem Betreuer vorgegebenen Anwendungsfall (siehe Besprechung
 in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Kalenderwoche-46:-13.11.2014"

\end_inset

) erlangen die Simulationen eine praxisnahe Relevanz.
 Es können Vorgaben zum Netzwerk, den Mechanismen und dem Lastprofil parametrisi
ert werden, um den Optimierungsbedarf heraus zu kristallisieren.
\end_layout

\begin_layout Standard
Mit den Daten, die der Arbeit auf einem USB-Stick beigelegt sind, können
 die Simulationen selbst durchgeführt und verifiziert werden.
\end_layout

\begin_layout Section
Erfüllung der Aufgabenstellung 
\begin_inset CommandInset label
LatexCommand label
name "sec:Erfüllung-der-Aufgabenstellung"

\end_inset


\end_layout

\begin_layout Subsection
HSR-Knoten
\end_layout

\begin_layout Subsubsection
Zwei Prioritäten
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Knoten soll zwei Prioritäten unterstützen, d.h.
 zwei Warteschlangen pro Interface bewirtschaften.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wenn zwei Frames mit unterschiedlichen Prioritäten (Low & High) zur gleichen
 Zeit eintreffen wird das Frame mit der Priorität High als Erstes weitergesendet.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Frames werden in unterschiedliche Queues (Warteschlangen) gesetzt und
 diese werden der Reihe nach abgearbeitet (Absteigend nach Priorität).
\begin_inset Newline newline
\end_inset

Es existieren pro Scheduler 6 Queues, dessen Nummerierungen in einem Enum
 gespeichert sind:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=C++,tabsize=2}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={hsrDefines.h - Enum mit Queuenummerierung}
\backslash
label{lst:enumqueuenum},captionpos=b]
\end_layout

\begin_layout Plain Layout

typedef enum {
\end_layout

\begin_layout Plain Layout

    EXPRESS_RING,
\end_layout

\begin_layout Plain Layout

    EXPRESS_INTERNAL,
\end_layout

\begin_layout Plain Layout

    HIGH_RING,
\end_layout

\begin_layout Plain Layout

    HIGH_INTERNAL,
\end_layout

\begin_layout Plain Layout

    LOW_RING,
\end_layout

\begin_layout Plain Layout

    LOW_INTERNAL 
\end_layout

\begin_layout Plain Layout

} queueName;  
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Der Switch analysiert das erhaltene Frame nach Priorität und Herkunft und
 teilt dem Scheduler mit, in welcher Queue er das Frame einordnen soll.
 Ein Ausschnitt dieser Analyse und Zuteilung (Herkunft des Frames ist im
 Beispiel von der CPU und wird an beide Ausgänge zum Ring zugeteilt) ist
 in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Switch:-Zuteiltung-Frame"

\end_inset

 einsehbar.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Nach der Zuteilung werden die Queues je nach Mechanismus im Scheduler abgearbeit
et.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Knoten unterstützt zwei Prioritäten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
IET
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Knoten soll Interspersing Express Traffic (IET) unterstützen, d.h.
 Express Frames können die aktuell ablaufende Übertragung eines Frames unterbrec
hen.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Unterbrechung findet nicht wirklich, sondern nur in der Zeitberechnung
 statt.
 Sobald ein Express-Frame ankommt wird es zu dem Zeitpunkt, zu dem ein Fragment
 des zu unterbrechenden Frames übertragen wurde, mit Interframe Gap (IFG),
 versendet.
 Danach wird die Zeit, die für die Übertragung des Express-Frames plus IFG
 und Grösse der neu entstandenen Felder der weiteren Fragmente verwendet
 wurde, dem 
\begin_inset Quotes fld
\end_inset

fragmentierten
\begin_inset Quotes frd
\end_inset

 Frame hinzugefügt.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Dies hat für die Auswertung den selben Effekt wie wenn eine Fragmentierung
 stattgefunden hätte (Express-Frame wird während normalem Frame versandt,
 normales Frame kommt später an).
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der folgende Text bezieht sich auf den Codeausschnitt aus Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Scheduler:-Zeitberechnung-und"

\end_inset

:
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Der Scheduler prüft beim Abarbeiten seiner Queues (
\begin_inset Quotes fld
\end_inset

processOneQueue()
\begin_inset Quotes frd
\end_inset

), ob derzeit normale Frames oder Express-Frames versendet werden (anhand
 der 
\begin_inset Quotes fld
\end_inset

transmitLock
\begin_inset Quotes frd
\end_inset

-Variablen, werden mit den 
\begin_inset Quotes fld
\end_inset

unlock()
\begin_inset Quotes frd
\end_inset

-Funktionen nach dem Senden eines Frames wieder aufgehoben).
 Wird derzeit nichts versendet, kann das Frame normal versendet werden.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Wird derzeit ein normales Frame versendet und es steht der Versand eines
 Express-Frames an, wird anhand dem normalen Frame berechnet, wann das Express-F
rame versendet werden kann (
\begin_inset Quotes fld
\end_inset

getExpressSendTime()
\begin_inset Quotes frd
\end_inset

).
 Kann das normale Frame nicht fragmentiert werden, gibt 
\begin_inset Quotes fld
\end_inset

getExpressSendTime()
\begin_inset Quotes frd
\end_inset

 einen ungültigen Wert zurück, der von 
\begin_inset Quotes fld
\end_inset

processOneQueue()
\begin_inset Quotes frd
\end_inset

 abgefangen wird (dann wird das Express-Frame nachdem das normale Frame
 fertig versendet wurde bzw.
 beim nächsten Abarbeiten versendet).
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Gibt 
\begin_inset Quotes fld
\end_inset

getExpressSendTime()
\begin_inset Quotes frd
\end_inset

 einen gültigen Wert zurück, der besagt, wann das Express-Frame versendet
 werden kann, so wird ein Event gesendet, der zum berechneten Zeitpunkt
 das Express-Frame versendet und das normale Frame wird verlängert (siehe
 
\begin_inset Quotes fld
\end_inset

Fverlängert
\begin_inset Quotes frd
\end_inset

 in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Fragmentierung-und-Zeitberechnun"

\end_inset

).
 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Knoten unterstützt IET
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Limitierung Ringzufluss
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der in den Ring einfliessende Traffic kann limitiert werden.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Es wurde der Mechanismus implementiert, dass Frames erst versendet werden
 können, sobald eine gewisse Anzahl an Tokens generiert wurde (es gibt ein
 Maximum an Tokens).
 Beim Versand werden diese Tokens verbraucht (ein Token pro Byte).
 Ein weiteres Frame kann erst wieder versandt werden, sobald genügend Tokens
 vorhanden sind.
 Für genauere Informationen zum Mechanismus siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Limitierung-des-Zuflusses"

\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
In der Datei 
\begin_inset Quotes fld
\end_inset

omnetpp.ini
\begin_inset Quotes frd
\end_inset

 kann das maxmimum an Tokens gesetzt werden.
 Wird kein Maximum gesetzt, wird der Traffic nicht limitiert.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=bash,tabsize=2}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={omnetpp.ini - Definition Zuflusslimitierung}
\backslash
label{lst:enumqueuenum},captionpos=b]
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

# Set a maximum of x Byte/s of generated low-traffic
\end_layout

\begin_layout Plain Layout

**.endNodeSwitch.framebyteLimit = 12500
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset

Der Codeausschnitt, in welchem die Zuflusslimitierung umgesetzt ist, ist
 in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Scheduler:-Zuflusslimitierung"

\end_inset

 aufzufinden.
 In diesem Codeausschnitt befinden sich 2 Methoden, 
\begin_inset Quotes fld
\end_inset

containerHasEnoughBytes()
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

subtractFromByteContainer()
\begin_inset Quotes frd
\end_inset

 .
 
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Quotes fld
\end_inset

containerHasEnoughBytes()
\begin_inset Quotes frd
\end_inset

 wird vor jedem Versand aufgerufen und gibt false zurück, wenn ein 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

-Frame als Parameter mitgegeben wird und dessen Grösse die vorhandene Anzahl
 Tokens überschreitet.
 Zudem ist diese Funktion für die Token generierung zuständig.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
In 
\begin_inset Quotes fld
\end_inset

subtractFromByteContainer()
\begin_inset Quotes frd
\end_inset

 wird bei der vorhandenen Anzahl Tokens die Anzahl abgezogen, die der Grösse
 des mitgegebenen Frames in Bytes entspricht.
 Abgezogen wird jedoch nur, wenn es sich um ein 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

-Frame handelt.
 Diese Funktion wird beim Versenden aufgeführt und wird nur dann ausgeführt,
 wenn genügend Tokens vorhanden sind.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Knoten kann Zufluss limitieren
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Variierung der Vortrittsregeln
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Die Vortrittsregeln bezüglich der im Ring zirkulierenden Frames und den
 Frames, die in den Ring einfliessen, können variiert werden (z.B.
 „zirkulierende Frames haben immer Vortritt“ oder „minimaler Zufluss wird
 garantiert“).
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bezüglich der Herkunft gibt es zwei Arten von Verkehr: Vom Ring und von
 Aussen auf den Ring.
 Dabei sind 3 Arten von Vortrittsregeln implementiert:
\end_layout

\begin_layout Itemize
Frames vom Ring haben Vortritt (
\begin_inset Quotes fld
\end_inset

zirkulierende Frames haben immer Vortritt
\begin_inset Quotes frd
\end_inset

)
\end_layout

\begin_layout Itemize
Frames von Aussen haben Vortritt (
\begin_inset Quotes fld
\end_inset

minimaler Zufluss wird garantiert
\begin_inset Quotes frd
\end_inset

)
\end_layout

\begin_layout Itemize
Reissverschluss (Der Vortritt für Frames vom Ring und von Aussen wechselt
 sich ab: Wenn ein Frame vom Ring Vortritt hatte, hat als Nächstes das Frame
 von Aussen Vortritt)
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Mechanismus ist in der Datei 
\begin_inset Quotes fld
\end_inset

omnetpp.ini
\begin_inset Quotes frd
\end_inset

 definiert und wird vom Switch bei der Initialisierung in dessen Schedulern
 gesetzt.
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=bash,tabsize=2}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={omnetpp.ini - Definition Vortritt-Mechanismus
 im Switch}
\backslash
label{lst:enumqueuenum},captionpos=b]
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

# Define Schedulermode ("FCFS", "RING_FIRST", "INTERNAL_FIRST", "ZIPPER")
\end_layout

\begin_layout Plain Layout

**.endNodeSwitch.schedulerMode = "ZIPPER" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Define Schedulermode for one device, for example EndNode "MU1"
\end_layout

\begin_layout Plain Layout

**.MU1.endNodeSwitch.schedulerMode = "FCFS"
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Ein Ausschnitt, bei dem aufgezeigt wird wie die Vortritts-Mechanismen ablaufen,
 ist in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Scheduler:-Mechanismen-zur"

\end_inset

 einsehbar.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Knoten verfügt über unterschiedliche Vortrittsregeln
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Zeitschlitzverfahren
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Knoten implementiert ein Zeitschlitzverfahren, welches dem zeitkritischen
 Traffic und dem Bulk Traffic je eine Phase zuordnet.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Es ist ein Mechanismus implementiert, welcher einen Intervall in zwei Phasen
 aufteilt.
 
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
In der ersten Phase werden so viele Frames mit der Priorität High (Zeitkritische
r Traffic) verschickt wie möglich.
 Wenn in dieser Phase noch Platz frei ist, es jedoch keine Frames mit der
 Priorität High mehr gibt, dann können Frames mit der Priorität Low (Bulk
 Traffic) auch innerhalb dieser Phase versendet werden.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
In der zweiten Phase können lediglich Frames der Priorität Low versendet
 werden.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Express-Frames (gehören auch zum zeitkritischen Traffic) können natürlich
 zu jeder Zeit versendet werden.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Scheduler überprüft beim Abarbeiten seiner Queues, ob er sich in einer
 Phase befindet, in der er senden kann.
 Dazu ruft er die Funktion 
\begin_inset Quotes fld
\end_inset

timeslotIsValid()
\begin_inset Quotes frd
\end_inset

 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Scheduler:-Zeitschlitzverfahren"

\end_inset

) mit der derzeitigen Queue als Parameter auf und sendet nur, wenn diese
 
\begin_inset Quotes fld
\end_inset

true
\begin_inset Quotes frd
\end_inset

 zurück gibt.
 
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Diese Funktion gibt bei Express- und 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

-Frames immer 
\begin_inset Quotes fld
\end_inset

true
\begin_inset Quotes frd
\end_inset

 zurück, da Express-Frames immer und 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

-Frames auch in jeder Phase gesendet werden können, da diese nur gesendet
 werden, wenn kein 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

-Frame in den Queues existiert oder gesendet werden kann.
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
Wird der Funktion eine Queue mit 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

-Frames übergeben, überprüft sie anhand der derzeitigen Zeit, ob das Frame
 gesendet werden kann oder nicht.
 Dazu wird folgende Rechnung angewandt:
\begin_inset Formula 
\[
simtime=Derzeitige\, Simulationszeit\,(Jetztiger\, Zeitpunkt)\,[s]
\]

\end_inset


\begin_inset Formula 
\[
phase=Konfigurierte\, Phasengrösse\,[s]
\]

\end_inset


\begin_inset Formula 
\[
ret=Rückgabewert\,[Boolean]
\]

\end_inset


\begin_inset Formula 
\[
ret=\begin{cases}
simtime\%(2*phase)<phase & \, true\\
simtime\%(2*phase)\geq phase & \, false
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Quotes fld
\end_inset

ret
\begin_inset Quotes frd
\end_inset

 beträgt dabei den Rückgabewert der Funktion 
\begin_inset Quotes fld
\end_inset

timeslotIsValid()
\begin_inset Quotes frd
\end_inset

.
 Wenn 
\begin_inset Quotes fld
\end_inset

ret
\begin_inset Quotes frd
\end_inset

 
\begin_inset Quotes fld
\end_inset

true
\begin_inset Quotes frd
\end_inset

 ist, dann befindet sich die Simulation in der Grün-Phase und kann 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

-Frames versenden.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Knoten kann nach Zeitschlitzverfahren arbeiten
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lastgenerator
\end_layout

\begin_layout Standard
Wie sich die Lastengenerierung eines einzelnen HSR-Nodes verhält, wird in
 der Konfigurations-XML-Datei festgelgt.
 Die Struktur dieser XML-Datei wird in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Netzwerkaufbau"

\end_inset

 genau erläutert.
 Diese XML-Konfiguration wird zu Beginn eines Simulationslaufs geladen und
 in einem CPU-Objekt gespeichert.
\end_layout

\begin_layout Standard
Das CPU-Modul eines HSR-Knotens, siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:DANH-Knoten"

\end_inset

, löst die Generierung einzelner Frames je nach Konfigurationsparameter
 mittels 
\begin_inset Quotes fld
\end_inset

Selfmessages
\begin_inset Quotes frd
\end_inset

 aus.
\end_layout

\begin_layout Standard
Wenn ein neues Frame erstellt werden muss, wird die Methode 
\begin_inset Quotes fld
\end_inset

generateOnePacket()
\begin_inset Quotes frd
\end_inset

 des CPU-Moduls aufgerufen.
 Diese Methode kann im Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:CPU-Lastgenerator"

\end_inset

 eingesehen werden.
\end_layout

\begin_layout Standard
Im Rahmen dieser Arbeit wurden bei den Simulationen nur Lastgeneratoren
 verwenden die eine Ko
\end_layout

\begin_layout Subsubsection
Konstante Framerate
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Lastgenerator generiert für die Simulation ein Verkehrsaufkommen mit
 konstanter Framerate.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Es lässt sich ein Strom mit konstanter Framerate generieren.
 Mittels Konfigurationsdatei kann man die Rate (in welchen Zeitabständen
 ein neues Frame generiert werden soll) bestimmen.
 Zudem kann über den Parameter 
\begin_inset Quotes fld
\end_inset

epsilon
\begin_inset Quotes frd
\end_inset

 (siehe Konfigurations-XML 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Netzwerkaufbau"

\end_inset

) eine maximale Abweichung des herkömmlichen Intervalls definiert werden.
 Somit wird auf das definierte Intervall ein Wert aufsummiert, der sich
 zwischen 0 und dem epsilon-Wert bewegt und mit einer Zufallsfunktion zustande
 kommt.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Hat das Konfigurations-XML 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Lastgenerator kann Frames mit konstanter Rate erzeugen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Zufällige zeitliche Verteilung
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Lastgenerator generiert für die Simulation ein Verkehrsaufkommen mit
 einer zufälligen zeitlichen Verteilung der Frames.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Es kann ein Verkehrsaufkommen generiert werden, bei dem die Zeitabstände
 zwischen den Frames zufällig gewählt wird.
 Zudem kann man bestimmen, innerhalb welchem Bereich der Zeitabstand zufällig
 gewählt werden soll (z.B.
 mindestens 100ns und maximal 500ns).
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Lastgenerator kann Frames mit zufülliger zeitlicher Verteilung
 erzeugen
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Spontane Einzelmeldungen
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der Lastgenerator generiert für die Simulation ein Verkehrsaufkommen mit
 spontanen Einzelmeldungen.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Spontane Einzelmeldungen in Form von Express-Frames können generiert werden.
 Diese werden per Zufall versandt.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Lastgenerator kann spontane Einzelmeldungen versenden
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Durchführbarkeit der Simulationen und Interpretation der Resultate
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Das Zeitverhalten der verschiedenen Weiterleitungsvarianten soll durch entsprech
ende Simulationsläufe ermittelt werden.
 Die Resultate sind zu vergleichen und zu interpretieren.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Verschiedene Weiterleitungsvarianten können simuliert und analysiert werden.
 Statistiken können zudem generiert werden, was den Vergleich der Varianten
 untereinander vereinfacht.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Nachweis: Simulationen durchführ- und interpretierbar
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Rückblick
\end_layout

\begin_layout Standard
Alle Anforderungen der Aufgabenstellung wurden aus unserer Sicht erreicht
 und überprüft (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Erfüllung-der-Aufgabenstellung"

\end_inset

).
\end_layout

\begin_layout Standard
Nach einigen Anlaufschwierigkeiten (Code-Refactoring und fehlendem Quellcode
 bei der vorherigen Arbeit) ging die Einarbeitungsphase in OMNeT++ und IET
 gut von Statten.
 Auch die Struktur der Dokumentation war schnell aufgebaut.
 Ein sehr grosser Vorteil bei unserem Vorgehen war, dass die Dokumentation
 parallel zu den Programmierarbeiten fortlaufend gepflegt wurde und somit
 keine Informationen verloren gingen.
 Neben der fortlaufenden Pflegung der Dokumentation erstellten wir für das
 Projekt ein Wiki, in dem die neusten Erkenntnisse und Besprechungen festgehalte
n wurden und unser Betreuer jederzeit einsehen konnte.
 Für die Entwicklung der Implementation und der Dokumentation verwendeten
 wir ein Versionsverwaltungssystem (
\begin_inset Quotes fld
\end_inset

GitHub
\begin_inset Quotes frd
\end_inset

).
 So wusste jeder beim Projekt Involvierte zu jeder Zeit was zu tun ist und
 was noch getan werden muss.
\end_layout

\begin_layout Standard
Die Besprechungen mit unserem Betreuer erwiesen sich als interessant und
 lehrreich.
 Des Weiteren wurde die Arbeit zwischen Studenten und Dozenten auf einer
 äusserst kooperativen Ebene umgesetzt und diskutiert.
 Schade ist, dass solche Arbeiten während eines ereignisreichen Semesters
 durchgeführt werden müssen und somit zu wenig Zeit für allfällige Detailpflege
 und weitere Simulationen übrig bleibt.
\end_layout

\begin_layout Standard
Gerne würden wir eine weitere Arbeit in diesem Themengebiet und mit den
 Teilnehmern dieses Projektes in Anlauf nehmen.
\end_layout

\begin_layout Standard
Zusammenfassend kann ein positives Fazit gezogen werden: Das Projekt wurde
 mit grossem Interesse erarbeitet und trägt unserer Meinung nach auch Früchte.
\end_layout

\begin_layout Section
Ausblick
\end_layout

\begin_layout Standard
Mittels der implementierten Simulationsumgebung ist es möglich, IET in HSR-Netzw
erken zu simulieren, wobei es sich bei IET um einen Standard handelt, der
 bei Drucklegung dieser Arbeit noch immer im Entwicklungsstadium ist.
 
\end_layout

\begin_layout Standard
Die Implementierung würde sich beliebig erweitern lassen.
 Wir sehen das Potenzial in der Umsetzung von Verbindungen zwischen HSR-
 und Nicht-HSR-Netzwerken sowie der Kopplung verschiedener HSR-Ringe.
\end_layout

\begin_layout Standard
Des Weiteren könnten zusätzliche Mechanismen entwickelt und in Simulationen
 beobachtet werden.
 Zum Beispiel wäre die Umsetzung eines Schedulers mit einem ähnlichen Verfahren
 zum 
\begin_inset Quotes fld
\end_inset

Completely Fair Scheduler (CFS)
\begin_inset Quotes frd
\end_inset

 innerhalb der gleichpriorisierten Queues denkbar.
\end_layout

\begin_layout Standard
Mit der hier entwickelten Implementation könnte man selbstverständlich weitere
 Szenarien und Simulationen konfigurieren, durchführen und analysieren.
 Dank der Daten, die dieser Arbeit beliegen, ist dies problemlos möglich.
\end_layout

\end_body
\end_document
