#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\use_default_options true
\master 0000_PA14_wlan_1.lyx
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman cmr
\font_sans lmss
\font_typewriter cmtt
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf true
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing other 1.2
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 35mm
\topmargin 35mm
\rightmargin 25mm
\bottommargin 30mm
\headheight 18mm
\headsep 12mm
\footskip 20mm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Vorgehen / Methoden
\end_layout

\begin_layout Itemize
(Beschreibt die Grundüberlegungen der realisierten Lösung (Konstruktion/Entwurf)
 und die Realisierung als Simulation, als Prototyp oder als Software-Komponente)
\end_layout

\begin_layout Itemize
(Definiert Messgrössen, beschreibt Mess- oder Versuchsaufbau, beschreibt
 und dokumentiert Durchführung der Messungen/Versuche)
\end_layout

\begin_layout Itemize
(Experimente)
\end_layout

\begin_layout Itemize
(Lösungsweg)
\end_layout

\begin_layout Itemize
(Modell)
\end_layout

\begin_layout Itemize
(Tests und Validierung)
\end_layout

\begin_layout Itemize
(Theoretische Herleitung der Lösung)
\end_layout

\begin_layout Section
Aufbau der Simulation
\end_layout

\begin_layout Standard
In OMNeT++ wird ein HSR-Ring-Netzwerk aufgebaut, in welchem der Traffic
 simuliert wird.
 Mittels Konfigurationsdatei kann man die zu verwendenden Prioritäten (siehe
 Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Prioritäten-der-Ethernet-Frames"

\end_inset

) und Mechanismen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Mechanismen-zur-Trafficregelung"

\end_inset

) definieren, welche in den weiteren Kapiteln genauer behandelt werden.
\end_layout

\begin_layout Subsection
Prioritäten der Ethernet-Frames
\begin_inset CommandInset label
LatexCommand label
name "sub:Prioritäten-der-Ethernet-Frames"

\end_inset


\end_layout

\begin_layout Standard
Für die Frames sind 3 verschiedene Prioritäten vorgesehen, nämlich sogenannte
 Express-, High- und Low-Frames.
 Dabei handelt es sich um das in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Interspersing-Express-Traffic"

\end_inset

 beschriebene Express-Frame, wobei die High- und Low-Frames als normales
 Frame gelten und sich lediglich bei der Priorisierung unterscheiden.
\end_layout

\begin_layout Standard
In dieser Arbeit werden wir diese Frames wie folgt auf technischer Ebene
 unterscheiden:
\end_layout

\begin_layout Itemize
Ein Express-Frame wird durch einen eigenen EtherType-Wert im Ethernet-Header
 definiert.
 So werden diese Frames auch nur von den Geräten erkannt, die diesen EtherType-W
ert kennen.
 Bis jetzt gibt es noch keine konkreten Vorschläge wie ein Express-Frame
 gekennzeichnet ist.
 Die hier erwähnte Kennzeichnung ist eine der Autoren ausgedachten Lösungen.
\end_layout

\begin_layout Itemize
Bei einem High-Frame handelt es sich um ein normales Ethernet-Frame das
 über ein VLAN-Tag mit der Priorität 1 versehen ist.
 Da das VLAN-Priority-Feld 3 Bits gross ist wären 8 verschiedene Prioritäten
 möglich, jedoch wird in dieser Arbeit keine Prioritätsnummer, die höher
 als 1 ist, verwendet.
\end_layout

\begin_layout Itemize
Als ein Low-Frame werden alle Frames definiert, welche ein VLAN-Tag mit
 der Priorität 0 oder keine besondere Kennzeichnung haben.
\end_layout

\begin_layout Subsection
Mechanismen zur Trafficregelung
\begin_inset CommandInset label
LatexCommand label
name "sub:Mechanismen-zur-Trafficregelung"

\end_inset


\end_layout

\begin_layout Standard
In diesem Kapitel werden Mechanismen erläutert, welche den Traffic regeln
 und in der Simulation implemeJeder Node (DANH oder Redbox, siehe Kapitel
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Gerätetypen HSR"

\end_inset

) im Netzwerk verfügt über einen internen Switch, der entscheidet wohin
 die Frames gesendet werden sollen.
 Zum Beispiel verfügt ein DANH in der Simulation über 3 Ports, zwei für
 die Frames vom und auf den Ring (Ethernet-Ports) und einen für die Frames
 von und zur CPU.
\end_layout

\begin_layout Standard
Für jeden möglichen Ausgang ist ein Scheduler zuständig (d.h.
 bei einem DANH-Gerät hat es 3 Scheduler), in welchem die Mechanismen zur
 Trafficregelung (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Mechanismen-zur-Trafficregelung"

\end_inset

) implementiert sind und die Frames priorisiert abhandelt.
 Der Scheduler ist innerhalb des Switches implementiert und erhält vom Switch
 Zugang zu dessen Ausgängen, die er benötigt und die Frames, die er für
 seinen Ausgang zu koordinieren hat.ntiert werden.
 Es besteht dann die Möglichkeit für jeden Knoten zwischen den Mechanismen
 auszuwählen oder diese sogar zu kombinieren.
\end_layout

\begin_layout Subsubsection
Limitierung des Zuflusses von neuem Traffic
\begin_inset CommandInset label
LatexCommand label
name "sub:Limitierung-des-Zuflusses"

\end_inset


\end_layout

\begin_layout Standard
Jedes Gerät generiert intern mit einer fixen Rate eine Anzahl an Tokens
 bis zu einem bestimmten Maximum.
 Möchte das Gerät ein neues, intern generiertes Frame versenden, kann es
 das Frame erst versenden wenn genügend Tokens vorhanden sind.
 Dabei verbraucht ein Frame mit n Bytes genau n Tokens.
 Wenn zum Beispiel ein Frame mit 800 Bytes versendet werden muss und nur
 600 Tokens vorhanden sind, muss das Gerät mit dem Versand warten bis genügend
 Tokens vorhanden sind.
\end_layout

\begin_layout Standard
So kann der Zufluss von neuem Traffic limitiert werden, womit kein Gerät
 das Netzwerk mit neuen Frames überschütten kann.
\end_layout

\begin_layout Subsubsection
Vortrittsregeln bezüglich Frames im und zum Ring
\begin_inset CommandInset label
LatexCommand label
name "sub:Vortrittsregeln-bezüglich-Frames"

\end_inset


\end_layout

\begin_layout Standard
Damit die Frames innerhalb des Rings (HSR-Netzwerks) schneller zum Ziel
 kommen, kann diesen Frames der Vortritt gegenüber Frames von Aussen gewährt
 werden.
 Dies ist bei gleich priorisierten Frames der Fall.
 Es kann hier jedoch die Möglichkeit geben, dass so nie Frames von Aussen
 versendet werden.
\end_layout

\begin_layout Standard
Je nach auftretenden Prioritäten kann es auch sein, dass von Aussen ein
 Express-Frame und vom Ring ein High-Frame kommt.
 Dann hat das Express-Frame trotz der Herkunft von Aussen aufgrund dessen
 Priorität Vortritt.
\end_layout

\begin_layout Standard
Die andere Möglichkeit ist, den Frames, die auf den Ring sollen, den Vortritt
 zu gewähren.
 So kann ein minimaler Zufluss auf den Ring garantiert werden.
 Hier kann es den umgekehrten Fall wie wenn die Frames vom Ring Vortritt
 haben geben: Wenn ständig neue Frames von Aussen kommen, werden die Frames
 vom Ring nie versendet.
\end_layout

\begin_layout Subsubsection
Reissverschluss
\end_layout

\begin_layout Standard
Ein Derivat des vorherigen Mechanismus ist, den Vortritt zwischen Frames
 vom Ring und von Aussen zu alternieren.
 Die Frames würden dann wie folgt priorisiert werden (Angenommen es kommen
 alle 3 Prioritäten (Express, High und Low) vor):
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\noindent
Liste 1
\end_layout

\begin_layout Enumerate
\noindent
Express-Frame vom Ring
\end_layout

\begin_layout Enumerate
Express-Frame von Aussen
\end_layout

\begin_layout Enumerate
High-Frame vom Ring
\end_layout

\begin_layout Enumerate
High-Frame von Aussen
\end_layout

\begin_layout Enumerate
Low-Frame vom Ring
\end_layout

\begin_layout Enumerate
Low-Frame von Aussen
\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "45col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\noindent
Liste 2
\end_layout

\begin_layout Enumerate
\noindent
Express-Frame von Aussen
\end_layout

\begin_layout Enumerate
Express-Frame vom Ring
\end_layout

\begin_layout Enumerate
High-Frame von Aussen
\end_layout

\begin_layout Enumerate
High-Frame vom Ring
\end_layout

\begin_layout Enumerate
Low-Frame von Aussen
\end_layout

\begin_layout Enumerate
Low-Frame vom Ring
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
So würde die Priorisierung zwischen der aus Liste 1 und der aus Liste 2
 nach jedem Frame-Versand abwechseln.
\end_layout

\begin_layout Subsubsection
Zeitschlitzverfahren
\begin_inset CommandInset label
LatexCommand label
name "sub:Zeitschlitzverfahren"

\end_inset


\end_layout

\begin_layout Standard
Im Zeitschlitzverfahren werden Zeitschlitze definiert, in denen man High-
 und Low-Frames senden kann, ein Express-Frame kann immer versendet werden.
 
\end_layout

\begin_layout Standard
Jeder Zeitschlitz hat eine sogenannte Grün-Phase, in welcher High-Frames
 gesendet werden können.
 Den Rest des Zeitschlitzes wird für den Sendevorgang oder Low-Frames verwendet.
 Sollten keine High-Frames da sein so können auch Low-Frames gesendet werden.
 Dies wiederholt sich in jedem Zeitschlitz.
 Mit diesem Mechanismus wird verhindert, dass Low-Frames nicht gesendet
 werden, wenn ständig High-Frames zum Senden bereitstehen.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/020_Zeitschlitzverfahren.png
	display false
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispiel von Frameabfolge mit Zeitschlitzverfahren
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Definition der Knoten
\end_layout

\begin_layout Standard
Jede Komponente eines Knotens (Netzwerkinterface, Switch, etc.) ist eine
 eigene C++-Klasse, welche die jeweiligen Funktionen enthält.
 Ein Knoten wird dann aus diesen Komponenten zusammengesetzt,be indem eine
 sogenannte NED-Datei (NED steht für Network Description) erstellt wird,
 in welcher die Komponenten initialisiert und verbunden werden 
\begin_inset CommandInset citation
LatexCommand cite
key "OMNET_USERGUIDE"

\end_inset

.
 Der Knoten selbst exisitert nicht als C++-Klasse, sondern lediglich als
 NED-Datei.
\end_layout

\begin_layout Standard
Der Aufbau eines DANH-Knoten in OMNeT++ sieht wie folgt aus:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/020_DANH-Knoten.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
DANH-Knoten in OMNeT++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es gibt in einem DANH-Gerät 3 Ports und für jeden Port gibt es zwei Netzwerkinte
rfaces, einen für normale und einen für Express-Frames.
 Der genaue Grund, warum für jeden Port zwei Netzwerkinterfaces existieren
 ist im Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Fragmentierung-und-Zeitberechnun"

\end_inset

 aufgeführt.
 Zwei Ports (im Bild 
\begin_inset Quotes fld
\end_inset

eth0
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

eth1
\begin_inset Quotes frd
\end_inset

) sind für den Anschluss an den Ring.
 Der dritte Port ist mit der CPU verbunden, die für die Generierung der
 neuen Frames verantwortlich ist.
 
\end_layout

\begin_layout Standard
Zwischen jedem Port und Komponente befindet sich eine Duplikatliste, durch
 die jedes Frame hindurch läuft.
 Die Duplikatliste überprüft anhand der Sequenznummer und der Quell-MAC-Adresse,
 ob dasselbe Frame schon mal die Duplikatliste passiert hat.
 Wenn dasselbe Frame schon mal von der Duplikatliste erkannt wurde wird
 es gelöscht.
 Durch diese Duplikatliste wird kein Frame mehrmals über den selben Port
 versendet.
\end_layout

\begin_layout Standard
Alle Frames, die beim DANH-Knoten ankommen oder von dessen CPU generiert
 werden, gelangen zum internen Switch.
 Dieser analysiert das Frame und weist es dem entsprechenden Scheduler zu,
 der die Frames je nach Priorität und aktiven Mechanismen in die entsprechende
 Warteschlange stellt.
 Dem Scheduler ist immer ein Port (also auch zwei Netzwerkinterfaces) zugeteilt,
 was heisst, dass ein Switch über 3 Scheduler verfügt.
 Der Scheduler ist zudem für das Senden der Frames zuständig.
 Er entscheidet wann über welches Netzwerkinterface welches Frame versendet
 wird.
\end_layout

\begin_layout Subsection
Netzwerkaufbau
\end_layout

\begin_layout Standard
So wie ein Knoten als NED-Datei seinen Aufbau mit den Komponenten beschreibt,
 wird ein Netzwerk auch als NED-Datei definiert, in welchem die Knoten initialis
iert und verbunden werden.
 Das folgende Bild zeigt ein Beispielaufbau mit 10 DANH-Knoten, die als
 Merging und Protection Units definiert wurden (mehr dazu siehe Kapitel
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Szenario-1:-Substation"

\end_inset

):
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/020_Netzwerkaufbau.png
	display false
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispielaufbau eines Netzwerks in OMNeT++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das Verhalten in diesem Beispiel ist bei jedem Knoten das Selbe, da es sich
 lediglich um DANH-Knoten handelt.
 Was variiert sind die MAC-Adresse (in der NED-Datei des Netzwerks definiert)
 und die Anzahl und Häufigkeit der Frames, die generiert werden.
 Für die Generierung von Frames wird eine XML-Datei definiert, bei der für
 jeden Knoten bestimmt wird wie viele Frames dieser Knoten an wen sendet.
 Das Generieren von Multi- und Broadcast-Frames ist auch möglich.
\end_layout

\begin_layout Standard
Es folgt ein Beispiel einer XML-Konfiguration für den Lastgenerator eines
 bestimmten Knoten:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
lstinputlisting[caption={Konfiguration des Lastgenerators eines Knotens}
\backslash
label{lst:configxml},  captionpos=t,language=XML]{_srcListings/hello.c}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{language=XML,tabsize=2}
\end_layout

\begin_layout Plain Layout


\backslash
begin{lstlisting}[caption={Konfiguration des Lastgenerators eines Knotens}
\backslash
label{lst:configxml},captionpos=b]
\end_layout

\begin_layout Plain Layout

<!-- 	
\end_layout

\begin_layout Plain Layout

Define framegenerator for node with MAC 00-15-12-14-88-04
\end_layout

\begin_layout Plain Layout

(has to be defined in NED-file from the network)
\end_layout

\begin_layout Plain Layout

-->
\end_layout

\begin_layout Plain Layout

<source>00-15-12-14-88-04
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<lastmuster>             
\end_layout

\begin_layout Plain Layout

		<typ>hsr</typ>    
\end_layout

\begin_layout Plain Layout

       
\end_layout

\begin_layout Plain Layout

<!-- 	
\end_layout

\begin_layout Plain Layout

		Behaviober 
\end_layout

\begin_layout Plain Layout

			Constant load -> "konstante last", 
\end_layout

\begin_layout Plain Layout

			Evenly distributed load -> "gleichverteilte last", 
\end_layout

\begin_layout Plain Layout

			Normally distributed load -> "normalverteilte last" 
\end_layout

\begin_layout Plain Layout

-->
\end_layout

\begin_layout Plain Layout

		<verhalten>konstante last</verhalten>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!--	Time when the first frame will be generated -->
\end_layout

\begin_layout Plain Layout

		<startzeit>0.001</startzeit>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!--	Generate frame until this time is reached -->
\end_layout

\begin_layout Plain Layout

		<stopzeit>0.06</stopzeit>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!--	Generate a frame every x seconds -->
\end_layout

\begin_layout Plain Layout

		<interval>0.00025</interval> <!-- 4000x per second -->                
        
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!--	
\end_layout

\begin_layout Plain Layout

		(Only for constant load behavior)
\end_layout

\begin_layout Plain Layout

		Generate bea random value between 0 and epsilon that 
\end_layout

\begin_layout Plain Layout

		will be added to the value of the previous tag
\end_layout

\begin_layout Plain Layout

		every time a new frame will be generated
\end_layout

\begin_layout Plain Layout

-->
\end_layout

\begin_layout Plain Layout

		<epsilon>0.0000125</epsilon> <!-- 12.5 us -->            
\end_layout

\begin_layout Plain Layout

be
\end_layout

\begin_layout Plain Layout

<!--	Set destination of frame (can be Uni-, Multi- or Broadcast) -->
\end_layout

\begin_layout Plain Layout

		<destination>01-15-12-14-88-0A</destination>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!--	Set datasize of frame (Size + 24 = Total Framesize) -->
\end_layout

\begin_layout Plain Layout

		<paketgroesse>136</paketgroesse>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!--	Set priority of frame ("EXPRESS", "HIGH", "LOW") -->
\end_layout

\begin_layout Plain Layout

		<priority>HIGH</priority>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	</lastmuster>   
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

</source>  
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Für einen Knoten können mehrere solcher Konfigurationen gleichzeitig gesetzt
 werden, wenn ein Knoten z.B.
 Frames der Priorität 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

 versenden soll.
 Des Weiteren können auch Knoten im Netz ohne einen Eintrag im XML existieren.
 Diese Knoten generieren dann zwar selber keine Frames, leiten jedoch Frames
 normal weiter wie jeder andere Knoten auch.
\end_layout

\begin_layout Standard
Sind keine Frames mehr im Umlauf und werden keine mehr generiert (wenn die
 Simulationszeit über der Zeit im 
\begin_inset Quotes fld
\end_inset

Stopzeit
\begin_inset Quotes frd
\end_inset

-Tag ist), dann wird die Simulation automatisch beendet.
 Während der Simulation wurde einiges aufgezeichnet, was nachher eingesehen
 und als Grafik dargestellt werden kann (Siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Resultate"

\end_inset

).
\end_layout

\begin_layout Subsection
Abhandlung der Frames innerhalb eines Gerätes
\end_layout

\begin_layout Standard
Sobald ein Gerät ein Frame erhält, wird es in dessen Switch analysiert und
 die Herkunft und das Ziel ermittelt, um entscheiden zu können, an welchen
 Ausgang das Frame weitergeleitet werden muss.
 Je nach Ausgang wird das Frame dann an den jeweiligen Scheduler weitergeleitet.
 Muss ein Frame an alle Ethernet-Ports gesendet werden (wenn z.B.
 ein Frame von der CPU des Gerätes generiert wird), dann wird dies vom Switch
 dupliziert und an die betroffenen Scheduler gesendet.
 Der Scheduler ermittelt dann die Priorität (und eventuell die Herkunft)
 des Frames, um diese dann in die entsprechende Queue einzuordnen.
 Die Herkunft ist nur je nach Mechanismus notwendig, wenn z.B.
 Frames, die vom Ring kommen, priorisiert werden (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Vortrittsregeln-bezüglich-Frames"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/020_Ablauf_Frame_Switch.png
	display false
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Beispielablauf und Schedulerzuordnung eines Frames in einem Switch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Scheduler arbeitet nach jedem neuen Frame seine Queues ab.
 Dabei überprüft er, ob auf seinem Ausgang gerade etwas gesendet wird und
 sendet bei einem freien Ausgang das nächste Frame, das je nach Priorität
 und Mechanismus an der Reihe ist.
 Wird gerade etwas auf dem Ausgang übertragen, versucht es der Scheduler
 erst nochmals sobald die Übertragung zu Ende ist.
\end_layout

\begin_layout Subsubsection
Express-Frame
\end_layout

\begin_layout Standard
Bei einem Express-Frame muss der Scheduler sofort handeln.
 Anders als bei einem normalen Frame muss das Express-Frame auch bei einem
 besetzten Ausgang versendet werden, weshalb das Frame, das gerade übertragen
 wird, wenn möglich fragmentiert werden muss.
 
\end_layout

\begin_layout Standard
Wichtig ist, dass kein Fragment unter der kleinstmöglichen Ethernet-Frame-Grösse
 von 64 Bytes liegt.
 Aus diesem Grund kann es sein, dass Frames manchmal nicht fragmentiert
 werden können und der Scheduler warten muss bis dieses versendet wurde.
\end_layout

\begin_layout Standard
Kann das Frame jedoch fragmentiert werden, so wird das derzeitige Fragment
 zu Ende gesendet und dann das Express-Frame versendet.
 Danach werden die restlichen Fragmente versendet.
\end_layout

\begin_layout Subsubsection
Fragmentierung und Zeitberechnung
\begin_inset CommandInset label
LatexCommand label
name "sub:Fragmentierung-und-Zeitberechnun"

\end_inset


\end_layout

\begin_layout Standard
In der Simulation findet jedoch keine richtige Fragmentierung statt, jedoch
 wird diese über Zeitberechnung miteinbezogen.
 Das heisst, dass ein Express-Frame bei einem belegten Ausgang gesendet
 wird, wenn das Fragment inklusive IFG versendet worden wäre.
 Die Ankunftszeit des 
\begin_inset Quotes fld
\end_inset

fragmentierten
\begin_inset Quotes frd
\end_inset

 Frame wird dann um die Dauer des Express-Frames inkl.
 dessen IFG verlängert.
\end_layout

\begin_layout Standard
Da keine wirkliche Fragmentierung statt findet, ist der Ausgang bei dem
 das zu unterbrechende Frame gesendet wird immer noch belegt.
 Aus diesem Grund gibt es für jeden Ausgang einen weiteren Ausgang ausschliessli
ch für Express-Frames.
\end_layout

\begin_layout Standard
Somit sind die Ankunfts- und Sendezeiten der Frames dieselben wie wenn eine
 tatsächliche Fragmentierung stattgefunden hätte.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename _img/020_Ablauf_Frame_Express.png
	display false
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Abhandlung von Frames inklusive Express-Frames
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Um herauszufinden, ob ein Frame fragmentierbar ist, muss dessen Grösse des
 effektiven Datenbereichs herausgefunden werden.
 In einem Mframe beträgt der effektive Datenbereich bei einem VLAN-Tag mindesten
s 42 Bytes und ohne VLAN-Tag 46 Bytes.
 Die Datenbereiche der weiteren Fragmente können mindestens 60 Bytes gross
 sein (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Mframe"

\end_inset

).
\end_layout

\begin_layout Standard
Die minimal mögliche Grösse eines mFrames ist somit 72 Bytes (8 Bytes Präambel
 und SMD + 60 Bytes Data + 4 Bytes MFCS/FCS).
\end_layout

\begin_layout Standard
Bei der Fragmentierung werden zudem pro Fragment neue Präambel-, SMD-, FragCount
- und (M)FCS-Felder generiert.
 Das heisst, dass pro neuem Fragment 12 Bytes plus Interframe Gap dazu kommen.
\end_layout

\begin_layout Standard
Natürlich kann bei einem Frame, das gerade übertragen wird nur noch der
 Teil fragmentiert werden, der aussteht.
 Demnach wird wie folgt vorgegangen, um herauszufinden, ob ein Frame fragmentier
bar ist:
\end_layout

\begin_layout Enumerate
Express-Frame muss versendet werden.
\end_layout

\begin_layout Enumerate
Hole Grösse des gesamten Frames in Bytes 
\begin_inset Quotes fld
\end_inset

F
\begin_inset Quotes frd
\end_inset

, das gerade gesendet wird.
\end_layout

\begin_layout Enumerate
Berechne die Anzahl Bytes, die bereits versendet wurden (in der folgenden
 Rechnung 
\begin_inset Quotes fld
\end_inset

V
\begin_inset Quotes frd
\end_inset

):
\begin_inset Formula 
\[
simtime=Derzeitige\, Simulationszeit\,/\, Jetztiger\, Zeitpunkt
\]

\end_inset


\begin_inset Formula 
\[
datarate=Übermittlungsrate\, in\, Bits\, pro\, Sekunde
\]

\end_inset


\begin_inset Formula 
\[
sendtime=Zeit,\, an\, der\, die\,Übertragung\, begonnen\, hat
\]

\end_inset


\begin_inset Formula 
\[
V=((simtime-sendtime)*datarate)/8
\]

\end_inset


\end_layout

\begin_layout Enumerate
Berechne die Anzahl Bytes, die noch offen stehen (in der folgenden Rechnung
 
\begin_inset Quotes fld
\end_inset

O
\begin_inset Quotes frd
\end_inset

) und addiere das, was pro neues Fragment an Feldern dazu kommt:
\begin_inset Formula 
\[
O=F-V+12
\]

\end_inset


\end_layout

\begin_layout Enumerate
Wenn V grösser gleich 72 Bytes und IFG (von der Simulationsumgebung vorgegeben)
 zusammen beträgt, V durch 4 geteilt 0 ergibt und O grösser als 72 Bytes
 ist (Data-Felder je mindestens 60 Bytes), kann das Express-Frame jetzt
 gesendet werden.
 Die weiteren Schritte müssen nicht mehr erledigt werden, da das Express-Frame
 versandt wurde und der Vorgang somit erfolgreich war.
\end_layout

\begin_layout Enumerate
Wenn V nicht grösser gleich 72 Bytes und IFG zusammen beträgt oder bei der
 Division durch 4 nicht 0 ergibt, O aber grösser gleich 72 Bytes ist, dann
 muss abgewartet werden bis folgender Zeitpunkt (in der folgenden Rechnung
 
\begin_inset Quotes fld
\end_inset

t
\begin_inset Quotes frd
\end_inset

) erreicht ist:
\begin_inset Formula 
\[
I=Interframe\, Gap\, in\, Bytes
\]

\end_inset


\begin_inset Formula 
\[
t=\begin{cases}
V\geqq72 & \: simtime+\frac{(4-(V\,\%\,4)+I)*8}{datarate}\\
V<72 & \: simtime+\frac{(72-V+(4-(V\,\%\,4))+I)*8}{datarate}
\end{cases}
\]

\end_inset

Diese Formel berechnet den nächsten Zeitpunkt, ab dem eine Fragmentierung
 möglich wäre.
 Ist V schon über oder gleich der Minimalgrösse (72 Bytes), muss lediglich
 abgewartet werden bis dessen Grösse durch 4 dividiert 0 ergibt und der
 IFG versendet wurde.
 Ist V kleiner als die Minimalgrösse, muss abgewartet werden bis diese erfüllt
 ist und die Selben Bedingungen erfüllt sind wie wenn V die Minimalgrösse
 schon erreicht hat.
\end_layout

\begin_layout Enumerate
Ist der Zeitpunkt erreicht, muss O und somit auch V neu berechnet werden
 (Siehe Schritt 3 und 4).
 Ist O nicht mehr grösser gleich 72 Bytes, muss man mit dem Senden des Express-F
rames warten, bis das ganze Frame versendet wurde.
 Ist O aber jetzt noch grösser gleich 72 Bytes, kann das Express-Frame jetzt
 versendet werden.
\end_layout

\begin_layout Subsection
Generierung von Traffic (Lastprofile)
\end_layout

\begin_layout Standard
In jedem Node ist ein Generator implementiert, welcher mittels Konfigurationspar
ameter Frames in verschiedenen Folgemustern generieren kann.
 In diesem Kapitel werden verschiedene Muster von Traffic (Lastprofile)
 aufgezeigt, die in der Simulation generiert werden können.
\end_layout

\begin_layout Standard
Die Lastprofile teilen dabei folgende Eigenschaften bezüglich der Prioritäten
 der Frames:
\end_layout

\begin_layout Itemize
Express-Frames sind klein und kommen selten vor.
 Sie sollen Alarme in einem System darstellen, welche schnellstmöglich übermitte
lt werden müssen.
\end_layout

\begin_layout Itemize
Frames der Priorität 
\begin_inset Quotes fld
\end_inset

High
\begin_inset Quotes frd
\end_inset

 stellen den normalen Verkehr dar.
 Dies kann unter anderem Down- und Upload von Dateien, Monitoring, etc.
 sein.
 Die Grösse der Frames kann klein und gross sein.
\end_layout

\begin_layout Itemize
Die Frames mit der Priorität 
\begin_inset Quotes fld
\end_inset

Low
\begin_inset Quotes frd
\end_inset

 bilden den Background-Traffic, der oft vorkommt und wie der normale Verkehr
 verschieden gross sein kann.
\end_layout

\begin_layout Standard
Bezüglich der Auftretenswahrscheinlichkeit der Frames lässt sich demnach
 folgendes sagen: Je höher die Priorität, desto seltener kommt das Frame
 vor.
\end_layout

\begin_layout Section
Überprüfung der Implementation
\end_layout

\begin_layout Standard
Damit man sich sicher sein kann, dass die Simulation wie geplant verläuft,
 wird die Implementation vor der Simulation der Szenarien überprüft.
\end_layout

\begin_layout Subsection
Aufbau der Testumgebung
\end_layout

\begin_layout Standard
Für die Tests wird in der Simulation ein HSR-Ring mit 3 DANH-Geräten (
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

Node2
\begin_inset Quotes frd
\end_inset

 und 
\begin_inset Quotes fld
\end_inset

Node3
\begin_inset Quotes frd
\end_inset

) implementiert.
\end_layout

\begin_layout Subsection
Verhaltensüberprüfung
\end_layout

\begin_layout Subsubsection
Frames richtig weiterleiten und empfangen
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ein Frame wird von einem Knoten, der nicht der einzige Empfänger des Frames
 ist, an den nächsten Knoten weitergeleitet.
 Das Frame wird bei einem Unicast-Frame vom Empfänger und bei einem Multi-/Broad
cast-Frame vom Sender vom Netz entfernt.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der sich im Knoten befindende Switch analysiert die Quell- und Ziel-Adresse
 und den Herkunftsport des Frames und leitet es an den entsprechenden Port
 (links, rechts auf den Ring oder zur CPU) weiter.
 
\end_layout

\begin_layout Plain Layout
Frames, welche vom eigenen Switch stammen und nicht von der CPU kommen werden
 entfernt, um zirkulierende Frames (können Uni-, Multi- oder Broadcast sein)
 zu verhindern.
\end_layout

\begin_layout Plain Layout
Multi- und Broadcast-Frames (die nicht vom Knoten selbst stammen) werden
 an alle Ports ausser dem Herkunftsport weitergeleitet.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Für den Nachweis dieses Tests werden 3 verschiedene Fälle betrachtet und
 den Nachrichtenverlauf der jeweiligen Simulation angezeigt.
 Im 
\begin_inset Quotes fld
\end_inset

Namen
\begin_inset Quotes frd
\end_inset

 des Frames (siehe nächstes Bild) steht der Knoten, der das Frame generiert
 hat, die Priorität und die Sequenznummer des Frames.
 Am Anfang des 
\begin_inset Quotes fld
\end_inset

Namens
\begin_inset Quotes frd
\end_inset

 steht zudem, ob es sich um ein Unicast-, Multicast- oder Broadcast-Frame
 handelt.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Unicast-Frame von 
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset

 zu 
\begin_inset Quotes fld
\end_inset

Node3
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename _img/selftest/001_unicast_01_to_03.png
	display false
	scale 60

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Multicast-Frame von 
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename _img/selftest/001_multicast_01.png
	display false
	scale 60

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout
Broadcast-Frame von 
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename _img/selftest/001_broadcast_01.png
	display false
	scale 60

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test: Frameablauf in der Testumgebung
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Beachten der Priorisierung
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wenn zwei Frames mit unterschiedlichen Prioritäten ankommen soll das mit
 der höheren Priorität vor dem anderen verarbeitet werden.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Der sich im Knoten befindende Switch hat für jeden seiner Ports einen Scheduler.
 Jeder dieser Scheduler verfügt über Queues, für jede Priorität und Herkunft
 (von Ring oder Aussen) eine, also total 6 Queues.
 Der Switch fügt ein ankommendes Frame beim jeweiligen Scheduler in die
 jeweilige Queue ein.
 Der Scheduler beginnt darauf mit dem Abarbeiten der Queues und startet
 dabei mit der Queue der höchsten Priorität.
\end_layout

\begin_layout Plain Layout
Wenn z.B.
 zwei Frames, eines mit der Priorität 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

 und eines mit der Priorität 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset

 zur exakt selben Zeit bei einem Scheduler eingereiht werden, wird garantiert
 das Frame mit der Priorität 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset

 zuerst versendet.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Folgende Frames werden zur exakt selben Zeit generiert:
\end_layout

\begin_layout Itemize
Unicast-Frame von 
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset

 zu 
\begin_inset Quotes fld
\end_inset

Node3
\begin_inset Quotes frd
\end_inset

 mit Priorität 
\begin_inset Quotes fld
\end_inset

EXPRESS
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
Unicast-Frame von 
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset

 zu 
\begin_inset Quotes fld
\end_inset

Node3
\begin_inset Quotes frd
\end_inset

 mit Priorität 
\begin_inset Quotes fld
\end_inset

HIGH
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Itemize
Unicast-Frame von 
\begin_inset Quotes fld
\end_inset

Node1
\begin_inset Quotes frd
\end_inset

 zu 
\begin_inset Quotes fld
\end_inset

Node3
\begin_inset Quotes frd
\end_inset

 mit Priorität 
\begin_inset Quotes fld
\end_inset

LOW
\begin_inset Quotes frd
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test: 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Express-Frames und Fragmentierung
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll ein Express-Frame versendet werden, so wird dies sofort versandt wenn
 derzeit keine anderen Frames auf demselben Ausgang versendet werden.
 
\end_layout

\begin_layout Plain Layout
Wird jedoch etwas darauf gesendet, so wird das Express-Frame zu dem Zeitpunkt
 versandt, an dem ein Fragment des anderen Frames (inklusive Interframe
 Gap) fertig versendet worden wäre.
 Die Dauer, die das Express-Frame inkl.
 IFG beanspruchte, wird der Ankunftszeit des 
\begin_inset Quotes fld
\end_inset

fragmentierten
\begin_inset Quotes frd
\end_inset

 Frames angerechnet.
\begin_inset Newline newline
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Langes Frame und 2 Express
\end_layout

\begin_layout Plain Layout
Nicht fragmentierbar
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test: 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
xxxxxxxxxxxxxxxxxx
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="10text%">
<column alignment="left" valignment="top" width="90text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Soll
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ist
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nachweis
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Test: 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verhält sich Frame wie geplant?
\end_layout

\begin_layout Standard
Was wenn....?
\end_layout

\begin_layout Standard
Prioritäten?
\end_layout

\begin_layout Standard
\begin_inset Quotes fld
\end_inset

Preemption
\begin_inset Quotes frd
\end_inset

?
\end_layout

\begin_layout Section
Simulation
\begin_inset CommandInset label
LatexCommand label
name "sec:Simulation"

\end_inset


\end_layout

\begin_layout Standard
In diesem Kapitel werden die Szenarien definiert, die in dieser Arbeit simuliert
 werden.
 Die Resultate der jeweiligen Simulation sind im Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Resultate"

\end_inset

 aufgeführt.
 Wie diese Szenarien selber simuliert werden können, wird in der Anleitung
 in 
\begin_inset CommandInset ref
LatexCommand vref
reference "chap:Anleitung-zur-Simulationsumgebun"

\end_inset

 beschrieben.
\end_layout

\begin_layout Subsection
Szenario 1: Substation Automation
\begin_inset CommandInset label
LatexCommand label
name "sub:Szenario-1:-Substation"

\end_inset


\end_layout

\begin_layout Standard
Der Aufbau dieses Szenarios ist ein HSR-Ring mit verschiedenen Knoten.
 Die Aufgabe im Anwendungsfall Substation Automation ist der Schutz von
 Schaltern und Leitungen sicher zu stellen.
\end_layout

\begin_layout Standard
Im HSR-Ring befinden sich sogenannte Merging Units (MU), welche die Messwerte
 mit Sensoren erfassen und diesemit Zeitstempel und sonstigen Steuerinformatione
n in ein Frame packen.
 Ein solches Frame hat eine Gesamtgrösse von 160 Bytes (inklusive Header)
 und die Priorität 
\begin_inset Quotes fld
\end_inset

High
\begin_inset Quotes frd
\end_inset

.
 Eine MU verschickt konstant 4000 mal pro Sekunde ein solches Frame via
 Multicast (Publisher / Subscriber Modell).
 Ziel dieser Frames sind Protection Units (PU) und eventuell andere MUs.
 Protection Units sind im Netzwerk doppelt vorhanden und treffen anhand
 der erhaltenen Messwerte Entscheidungen.
\end_layout

\begin_layout Standard
Neben den erwähnten Frames gibt es spontane Einzelmeldungen (Express-Frames,
 auch Multicast), welche selten und zufällig vorkommen.
 Die grösse dieser Express-Frames beträgt ca.
 100 Bytes.
\end_layout

\begin_layout Standard
Als Background-Traffic wird von 2 Knoten TCP-ähnlicher Traffic generiert,
 bei dem ein Knoten (Knoten A) alle 200 Sekunden Frames mit einer Grösse
 von 1500 Bytes an den anderen Knoten (Knoten B) sendet (Unicast).
 Knoten B sendet zur selben Zeit auch alle 200 Sekunden Frames à 64 Bytes
 an Knoten A.
\end_layout

\begin_layout Standard
Sofern es nicht anders erwähnt wird, befinden sich in den Simulationen 14
 MUs und 2 PUs, die in einem Ring mit einer 100Mbps-Verbindung verbunden
 sind.
 Die Prioritäten der Frames werden in jeder Simulation berücksichtigt.
\end_layout

\begin_layout Subsubsection
Simulation 1.1: First Come First Serve
\end_layout

\begin_layout Standard
Szenario 1 wird ohne spezielle Mechanismen in den Knoten simuliert.
 Es spielt in dieser Variante keine Rolle, ob ein Frame von Aussen oder
 vom Ring kommt.
\end_layout

\begin_layout Subsubsection
Simulation 1.2: Vortritt für Frames vom Ring
\end_layout

\begin_layout Standard
Jeder Knoten im Ring gewährt den Frames, die vom Ring kommen, den Vortritt
 gegenüber den Frames, die von Aussen kommen.
 Die Frames, die von Aussen kommen, sind dabei die, die vom Knoten selbst
 generiert werden.
\end_layout

\begin_layout Subsubsection
Simulation 1.3: Vortritt für Frames von Aussen
\end_layout

\begin_layout Standard
Jeder Knoten im Ring gewährt den Frames, die von Aussen kommen, den Vortritt
 gegenüber den Frames, die vom Ring kommen.
 Die Frames, die von Aussen kommen, sind dabei die, die vom Knoten selbst
 generiert werden.
 Wenn ein Knoten ständig Frames generiert kann es sein, dass die Frames
 vom Ring bei diesem Knoten nie zum Zuge kommen und somit nie weitergeleitet
 werden.
\end_layout

\begin_layout Subsubsection
Simulation 1.4: Vortritt für Frames von Aussen mit Zuflusslimitierung
\end_layout

\begin_layout Standard
Die Simulation 1.3 wird mit einer Zuflusslimitierung erweitert.
 Mit Hilfe dieser Limitierung kann ausgeschlossen werden, dass Frames vom
 Ring nie weitergeleitet werden wenn ein Knoten ständig Frames generiert.
\end_layout

\begin_layout Subsubsection
Simulation 1.5: Reissverschluss
\end_layout

\begin_layout Standard
Es wird in jedem Knoten abwechslungsweise der Vortritt für Frames vom Ring
 und von Aussen gewährt.
 Wurde zum Beispiel ein Frame vom Ring versendet, wird als nächstes ein
 Frame von Aussen versendet, sofern eines gesendet werden muss.
\end_layout

\begin_layout Subsubsection
Simulation 1.6: Zeitschlitzverfahren
\end_layout

\begin_layout Standard
In jedem Knoten wird das Zeitschlitzverfahren (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Zeitschlitzverfahren"

\end_inset

) angewendet.
\end_layout

\begin_layout Subsubsection
Simulation 1.7: Maximale Auslastung
\end_layout

\begin_layout Standard
Anstelle von 14 werden 17 MUs eingesetzt.
 Zudem werden in dieser Simulation lediglich Messwerte und Express-Frames
 versendet, der TCP-ähnliche Traffic wird hier nicht simuliert.
 Laut unserem Betreuer (siehe Besprechung in Kapitel 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Kalenderwoche-48:-27.11.2014"

\end_inset

) sollte dann neben dem Traffic nichts mehr sonst Platz auf dem Ethernet
 haben.
\end_layout

\begin_layout Subsubsection
Simulation #.#: xxxxxxxxxxxxxxxxxxxxxxx
\end_layout

\begin_layout Standard
Mechanismen:
\end_layout

\begin_layout Standard
Keine (FCFS), Zuflusslimitierung, Vortritt Ring / von Aussen, Reissverschluss,
 Zeitschlitzverfahren
\end_layout

\end_body
\end_document
